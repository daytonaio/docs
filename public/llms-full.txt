---
title: Getting Started
description: Learn how to set up and start using Daytona.
---


This section will guide you through the steps required to install, configure, and use Daytona to manage your development environments.

## Before You Begin

Before installing and using Daytona, ensure that your operating system meets the necessary requirements, dependencies and tools.

### System requirements

Daytona supports multiple operating systems and architectures. Ensure your system matches one the following specifications:

| **Operating System**                         | **Architecture**                                   |
|-----------------------------------------------| --------------------------------------------------|
| [**Linux**](/docs/installation/installation)      | **`x86_64`** or **`ARM64`**                               |
| [**macOS**](/docs/installation/installation)      | **`x86_64 (Intel-based)`** or **`ARM64 (Apple Silicon)`** |
| [**Windows**](/docs/installation/installation)  | **`x86_64`** or **`ARM64`**                               |

### Dependencies

Daytona requires specific dependencies to be installed on your system to support the operation and management of development environments. Ensure these dependencies are installed and properly configured on your system:

| **Dependency**            | **Description**                                                                                 |
|---------------------------|-------------------------------------------------------------------------------------------------|
| <u>[**Docker**](https://docs.docker.com/engine/install/)</u> | Daytona uses Docker to create and manage isolated development environments.                     |
| Administrator Privileges  | Ensure that you have the necessary permissions to install and configure Daytona on your system. |

### Tools

Daytona requires certain tools to be installed on your system to optimize the setup and management of development environments. Ensure these tools are installed and properly configured on your system:

| **Tool**                          | **Description**                                                                                                                                 |
|-----------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------|
| Text Editor / IDE                 | Recommended for editing configuration files and working with code within Daytona Workspaces.                                                    |
| SSH Client                        | Required for accessing remote servers, especially if deploying Workspaces on a remote Docker installation or accessing remote Git repositories. |

## Installing Daytona

Follow the instructions provided in the [installation](/docs/installation/installation) guide to install Daytona on your operating system. The guide includes detailed steps for installing Daytona on Linux, macOS, and Windows operating systems.

The installation process may vary depending on your operating system and specific environment. Refer to the guide for comprehensive instructions tailored to your setup.

<DocumentList>
<DocumentListItem
    title="Linux Installation"
    href="/docs/installation/installation"
  />
  <DocumentListItem
    title="macOS Installation"
    href="/docs/installation/installation"
  />
  <DocumentListItem
    title="Windows Installation"
    href="/docs/installation/installation"
  />
</DocumentList>

Once you have completed the installation, you will be ready to start using Daytona to manage and develop your development environments. If you encounter any issues during installation, consult by reaching out to Daytona's [Slack community](https://go.daytona.io/slack) for assistance.

## Using the CLI

The Daytona Command-Line Interface (CLI) is the primary method of interacting with the Daytona platform. The CLI provides a comprehensive set of commands that allow you to manage Workspaces, Providers, and other system configurations.

To access the Daytona CLI, open your terminal and use the `daytona` command followed by the desired subcommand. The CLI offers a wide range of commands, each serving a specific purpose, such as creating Workspaces, managing Providers, setting Targets, and configuring system settings.

For a complete list of available commands and their descriptions, refer to the [CLI Reference](/docs/tools/cli). This reference guide provides detailed information on each command, including usage examples and command options, helping you leverage the full potential of the Daytona CLI.

Use the `daytona --help` command to list all commands, offering a convenient way to explore available options.

<DocumentList>
<DocumentListItem
    title="CLI Reference"
    subtitle="Learn how to use the Daytona Command-Line Interface (CLI) to manage your development environments."
    href="/docs/tools/cli"
    expanded
  />
</DocumentList>

## Adding a Git Provider

Integrate Daytona with a [Git Provider](/docs/configuration/git-providers) to manage version control operations and interact with your Git repositories.

Daytona supports a variety of Git Providers, including [GitHub](/docs/configuration/git-providers#github), [GitLab](/docs/configuration/git-providers#gitlab), [Bitbucket](/docs/configuration/git-providers#bitbucket), [GitHub Enterprise Server](/docs/configuration/git-providers#github-enterprise-server), [GitLab Self-Managed](/docs/configuration/git-providers#gitlab-self-managed), [Bitbucket Server](/docs/configuration/git-providers#bitbucket-server), [Codeberg](/docs/configuration/git-providers#codeberg), [Gitea](/docs/configuration/git-providers#gitea), [Gitness](/docs/configuration/git-providers#gitness), [Azure DevOps](/docs/configuration/git-providers#azure-devops), [AWS CodeCommit](/docs/configuration/git-providers#aws-codecommit), [Gogs](/docs/configuration/git-providers#gogs) and [Gitee](/docs/configuration/git-providers#gitee).

The integration supports and enables interacting with your codebase, cloning repositories, and pushing changes directly from Daytona.

1. Run the following command to add a Git Provider:

```shell
daytona git-providers add
```

2. Select the Git Provider you want to add from the list.

3. Enter your Git Provider credentials for Daytona to authenticate and enable secure access to your repositories.

Upon successful authentication, Daytona will register the Git Provider, allowing you to interact with your repositories directly from Daytona.

```text
Git provider has been registered
```

You can install additional [Git Providers](/docs/configuration/git-providers) to manage multiple repositories across different platforms and accounts.

Use the `daytona git-providers --help` command to view available options for managing your Git Provider configurations and interacting with your repositories.

<DocumentList>
<DocumentListItem
    title="Add a Git Provider"
    subtitle="Learn how to add a Git Provider to Daytona and start managing your repositories effectively."
    href="/docs/configuration/git-providers#add-a-git-provider"
    expanded
  />
</DocumentList>

## Installing a Provider

[Providers](/docs/configuration/providers) are plugins through which Daytona integrates with various technologies to create and manage development environments. Providers abstract complexities of underlying technologies and serve as the foundational engines that Daytona leverages to deploy and run your environments, whether through containerization, orchestration, or cloud-based virtual machines.

Daytona supports a variety of Providers, including [Docker](/docs/configuration/providers#docker), [DigitalOcean](/docs/configuration/providers#digitalocean), [AWS](/docs/configuration/providers#aws), [Azure](/docs/configuration/providers#azure), [GCP](/docs/configuration/providers#gcp), [Hetzner](/docs/configuration/providers#hetzner), and [Fly](/docs/configuration/providers#fly)

1. Run the following command to install a Provider:

  ```shell
  daytona provider install
  ```

2. Select the Provider you want to install from the list.

Upon selecting the Provider, Daytona will install and configure the chosen Provider, making it available for managing and deploying development environments.

```text
Provider <provider> has been successfully installed
```

You can install additional [Providers](/docs/configuration/providers) to extend Daytona's capabilities and support a wide range of container management platforms and cloud hosting services.

<DocumentList>
<DocumentListItem
    title="Install a Provider"
    subtitle="Learn how to install a Provider and interface with the Daytona Server."
    href="/docs/configuration/providers"
    expanded
  />
</DocumentList>

## Setting a Target

A [Target](/docs/configuration/targets) refers to the specific destination or environment where your development setups, facilitated by various Providers, are deployed and managed. Providers define the method and technology used to create your environments, while Targets specify the precise location or platform where these environments will reside.

A Target can be a local machine, a remote server, or a cloud instance, and it can vary based on the chosen Provider. Targets offer the flexibility to deploy and manage environments across different platforms and accounts, all within the unified interface provided by Daytona.

Daytona supports a variety of Targets, including [Docker (Local)](/docs/configuration/targets#docker), [Docker (Remote)](/docs/configuration/targets#docker), [DigitalOcean](/docs/configuration/targets#digitalocean), [AWS](/docs/configuration/targets#aws), [Azure](/docs/configuration/targets#azure), [GCP](/docs/configuration/targets#gcp), [Hetzner](/docs/configuration/targets#hetzner), and [Fly](/docs/configuration/targets#fly).

Once you set your Target, it becomes available for selection whenever you create a new development environment in Daytona. You can manage multiple Targets or delete those you no longer need.

1. Run the following command to set a Target:

```shell
daytona target set
```

2. Select the appropriate Provider for the environment you want to deploy to.
3. Select **`New Target`**.
4. Enter a name for your Target.
5. Enter the Target appropriate configuration options when prompted.

    The configuration options vary based on the selected Provider.

6. Click <Keyboard shortcuts={["Enter"]} slot="html"/> to confirm setting the Target.

```text
Target set successfully
```

You can set additional [Targets](/docs/configuration/targets) for different development environments, allowing you to manage and switch between them as needed.

Use the `daytona target --help` command to view available configuration options for setting a Target.

<DocumentList>
<DocumentListItem
    title="Set a Target"
    subtitle="Learn how to set a Target to define how Daytona manages your development environment."
    href="/docs/configuration/targets"
    expanded
  />
</DocumentList>

## Choosing the Default IDE

Connect to your development environment using a variety of [IDEs](/docs/usage/ide), including popular options like [Visual Studio Code (VSCode)](/docs/usage/ide#vs-code), JetBrains IDEs, [Jupyter](/docs/usage/ide#jupyter), [Zed](/docs/usage/ide#zed), [Cursor](/docs/usage/ide#cursor), and [Terminal SSH](/docs/usage/ide#terminal-ssh).

By setting the default IDE, you can automatically open your development environment in your preferred environment, optimizing your workflow and reducing setup time.

<br />

<CardGrid gridNumber={9} mobileGridNumber={2} colsMinWidth='16px' colsMinWidthMobile='98px'>
  <ImageCard icon={VSlogo} link="/usage/ide#vs-code" imageAlt="Visual Studio logo" />
  <ImageCard imageDark={PClogo} link="/usage/ide#jetbrains-pycharm-professional" imageAlt="PyCharm logo" />
  <ImageCard imageDark={IJlogo} link="/usage/ide#jetbrains-intellij-idea-ultimate" imageAlt="IntelliJ logo" />
  <ImageCard imageDark={WSlogo} link="/usage/ide#jetbrains-webstorm" imageAlt="WebStorm logo" />
  <ImageCard imageDark={GOlogo} link="/usage/ide#jetbrains-goland" imageAlt="GoLand logo" />
  <ImageCard imageDark={CLlogo} link="/usage/ide#jetbrains-clion" imageAlt="CLion logo" />
  <ImageCard imageDark={RDlogo} link="/usage/ide#jetbrains-rider" imageAlt="Rider logo" />
  <ImageCard imageDark={RMlogo} link="/usage/ide#jetbrains-rubymine" imageAlt="RubyMine logo"/>
  <ImageCard imageDark={TerminalSSHlogo} link="/usage/ide#terminal-ssh" imageAlt="Terminal SSH logo"/>
</CardGrid>

1. Run the following command to set the default IDE:

```shell
daytona ide
```

2. Select your preferred IDE from the list presented. Upon selecting, Daytona will set it as the default IDE and display a confirmation message.

```text
Default IDE:  <IDE>
```

Use the `daytona code` command to automatically open the default IDE already connected to your Workspace.

You can choose additional [IDEs](/docs/configuration/git-providers) and set them as the default for your development environments.

Use the `daytona ide --help` command to view available configuration options for the IDE.

<DocumentList>
<DocumentListItem
    title="Set Default IDE"
    subtitle="Learn how to set your default IDE to automatically open your development environment."
    href="/docs/usage/ide#set-the-default-ide"
    expanded
  />
</DocumentList>

## Creating your Workspace

[Create a Workspace](/docs/usage/workspaces#create-a-workspace) using Daytona to manage your development environments. A Workspace represents an isolated development environment where you can manage your code, build projects, and interact with your team.

To create a Workspace, use the `daytona create` command and follow the prompts to configure your Workspace settings. Once created, you can access your Workspace and interact with your codebase.

1. Run the following command to start the guided Workspace creation process:

```shell
daytona create
```

2. Select one of the three provided options:

- **Select from a List of Repositories**
- **Enter a Custom Repository URL**
- **Create from Sample**

3. Select the Git repository from the list, enter the URL of the Git repository you want to link with your Workspace, or choose to create a Workspace from a sample project.

4. Enter a name for your Workspace.

5. Wait while Daytona sets up your Workspace. It handles all the initialization and configuration of your environment.

```text
WORKSPACE | ✓ Request submitted
WORKSPACE | ✓ Creating workspace daytona
daytona   | Creating project daytona
daytona   | Pulling image...
daytona   | Pulling from daytonaio/workspace-project
...
daytona   | Project daytona created
daytona   | Starting project daytona
daytona   | Project daytona started
```

Use the `daytona create --help` command to view available configuration options for creating a Workspace.

<DocumentList>
<DocumentListItem
    title="Create a Workspace"
    subtitle="Learn how to create your Workspace using Daytona."
    href="/docs/usage/workspaces#create-a-workspace"
    expanded
  />
</DocumentList>

---
title: What is Daytona?
description: Understand how Daytona can help you manage your development environments.
sidebar:
  label: What is Daytona?
---

Daytona is an open-source Development Environment Manager (DEM) licensed under the Apache License 2.0.
Daytona allows you to manage and deploy Workspaces — reproducible development environments based on standard OCI containers, with built-in support for the Dev Container standard.
Daytona's architecture provides the future possibility to base Workspaces on other configuration standards, such as Dockerfiles, Docker Compose, Nix, and Devfile.

By leveraging configuration in a project's remote Git repository, Daytona builds a Workspace and provisions a workspace to a platform of your choice.
Once provisioned, you can develop and test the project using an IDE supported by Daytona, such as Visual Studio Code.

Daytona's functionality is exposed through a command-line tool that runs on Linux, macOS, and Windows systems, on both x86-64 and AArch64 architectures.

## Features

* __Security__

    Daytona creates a secure VPN connection between the client machine and the remote machine.
    All ports on the remote machine can be accessed securely without the need for manual port forwarding.

* __Support for Visual Studio Code and JetBrains__

    Daytona supports both Visual Studio Code and the JetBrains line of IDEs, making it easy to develop your project while feeling like everything's local.

* __Connect with GitHub, GitLab, Bitbucket, and Gitea__

    Daytona can create DEs by pulling repositories from your preferred SCM platform. Git operations can be executed within a workspace, allowing you to push your work without context switching.

* __Support for Multi-Project Workspaces__

    Daytona is capable of creating workspaces with multiple projects.
    Large projects split into micro-services or multiple repositories can be worked on using a single workspace.

* __Reverse Proxy Support__

    Daytona integrates a reverse proxy allowing you to access a workspace on a public or restricted network.

* __Extensible Core__

    Daytona supports plugins developed in Go.
    Third-party Providers can be added to Daytona, as well as extensions to core functionality.

---
title: Git Providers
description: Connect Daytona with GitHub, GitLab, Bitbucket, and other Git Providers.
sidebar:
  label: Configure Providers
---

<Label>
  Distribution: **Open Source**, **Cloud**, **Self-Managed**
</Label>

Git Providers — sometimes known as software forges or Source Code Managers (SCMs) — provide a set of tools to host and collaborate on codebases using Git.

Daytona allows you to integrate your preferred Git Provider, enhancing your development workflow. This integration enables you to access and manage your repositories directly within Daytona, simplifying workspace creation from existing projects.

By adding a Git Provider, your credentials are securely embedded into your Workspaces. This allows for seamless Git operations without repeated authentication.

## Add a Git Provider

1. Run the following command to add a Git Provider:

```shell
daytona git-providers add
```

Upon running this command, Daytona will prompt you to select the Git Provider you want to add.

```text
Choose a Git provider
GitHub
GitLab
Bitbucket
Other
```

2. Select the Git Provider you want to configure from the list:

- __[GitHub](#github)__

    Select if you are hosting repositories on GitHub.

- __[GitLab](#gitlab)__

    Select if you are hosting repositories on GitLab.

- __[Bitbucket](#bitbucket)__

    Select if you are hosting repositories on Atlassian's Bitbucket Cloud platform.

- __[GitHub Enterprise Server](#github-enterprise-server)__

    Select if you are hosting repositories on GitHub Enterprise Server.

- __[GitLab Self-Managed](#gitlab-self-managed)__

    Select if you are hosting repositories on GitLab's self-hosted platform.

    Self-hosted GitLab Community Edition (CE) installations, GitLab Self-Managed, and GitLab Dedicated platforms are supported.

- __[Bitbucket Server](#bitbucket-server)__

    Select if you are hosting repositories on Bitbucket Server.

- __[Codeberg](#codeberg)__

    Select if you are hosting repositories on Codeberg.

- __[Gitea](#gitea)__

    Select if you are hosting repositories on Gitea.

- __[Gitness](#gitness)__

    Select if you are hosting repositories on Gitness.

- __[Azure DevOps](#azure-devops)__

    Select if you are hosting repositories on Azure DevOps.

- __[AWS CodeCommit](#aws-codecommit)__

    Select if you are hosting repositories on AWS CodeCommit.

- __[Gogs](#gogs)__

    Select if you are hosting repositories on Gogs.

- __[Gitee](#gitee)__

    Select if you are hosting repositories on Gitee.

3. Enter your Git Provider credentials for Daytona to authenticate and enable secure access to your repositories.

```text
Personal access token
>
```

Some Git Providers require additional information such as your _username_ or the _URL_ of your self-managed API instance to complete the configuration.

4. Enter your Git Provider alias to identify it within Daytona.

```text
Alias                                                                         
Will default to username if left empty                                        
>
```

Upon successful authentication, Daytona will display the following message:

```text
Git provider has been registered
```

## List Connected Git Providers

Daytona allows you to keep track of your Git Providers by listing all previously created Git Providers.

1. Run the following command to list currently connected Git Providers:

```shell
daytona git-providers list
```

Upon running this command, Daytona will display a list of your connected Git Providers.

```text
GitHub (alias)
GitLab (alias)
```

## Update a Git Provider

Daytona allows you to update an existing Git Provider, enabling you to apply the latest enhancements and bug fixes.

1. Run the following command to update a Git Provider:

```shell
daytona git-providers update
```

Upon running this command, Daytona will display a list of your connected Git Providers.

```text
Choose a Git provider 
> github (alias)
```

2. Select the Git Provider you want to update from the list.

3. Enter your Git Provider credentials for Daytona to authenticate and enable secure access to your repositories.

```text
Personal access token
>
```

Some Git Providers require additional information such as your _username_ or the _URL_ of your self-managed API instance to complete the configuration.

4. Enter your Git Provider alias to identify it within Daytona.

```text
Alias                                                                         
Will default to username if left empty                                        
>
```

Upon successful update, Daytona will display the following message:

```text
Git provider has been updated
```

## Delete a Git Provider

Daytona allows you to delete Git Providers, helping you manage and delete those that are no longer needed. Once a Git Provider is deleted, you will not be able to manage or deploy Workspaces without adding another Git Provider.

1. Run the following command to delete a Git Provider:

```shell
daytona git-providers delete
```

Upon running this command, Daytona will display a list of existing Git Providers you can delete.

```text
Choose a Git provider
GitHub
GitLab
```

2. Select the Git Provider you want to delete.

Upon successful selection, Daytona will display the following message:

```text
Git provider has been removed
```

## GitHub

Daytona allows you to connect your GitHub account and access your repositories directly from Daytona.

1. Run the following command to add GitHub as a Git Provider:

```shell
daytona git-providers add
```

Upon running this command, Daytona will prompt you to choose a Git Provider you want to add. Select `GitHub` from the list.

```text
Choose a Git provider
> GitHub
```

After selecting GitHub as your Git Provider, you will be prompted to enter a Personal Access Token.

For more information on creating a Personal Access Token, visit GitHub's [Creating a personal access token (classic)][gh-token] documentation.

2. Enter your Personal Access Token for Daytona to authenticate and enable secure access to your GitHub repositories.

```text
Personal access token
>
```

3. Enter your Git Provider alias to identify it within Daytona.

```text
Alias                                                                         
Will default to username if left empty                                        
>
```

Upon successful authentication, Daytona will display the following message:

```text
Git provider has been registered
```

## GitLab

Daytona allows you to connect your GitLab account and access your repositories directly from Daytona.

1. Run the following command to add GitLab as a Git Provider:

```shell
daytona git-providers add
```

Upon running this command, Daytona will prompt you to choose a Git Provider you want to add. Select `GitLab` from the list.

```text
Choose a Git provider
> GitLab
```

After selecting GitLab as your Git Provider, you will be prompted to enter a Personal Access Token.

For more information on creating a Personal Access Token, visit GitLab's [Create a personal access token][gl-token] documentation.

2. Enter your Personal Access Token for Daytona to authenticate and enable secure access to your GitLab repositories.

```text
Personal access token
>
```

3. Enter your Git Provider alias to identify it within Daytona.

```text
Alias                                                                         
Will default to username if left empty                                        
>
```

Upon successful authentication, Daytona will display the following message:

```text
Git provider has been registered
```

## Bitbucket

Daytona allows you to connect your Bitbucket account and access your repositories directly from Daytona.

1. Run the following command to add Bitbucket as a Git Provider:

```shell
daytona git-providers add
```

Upon running this command, Daytona will prompt you to choose a Git Provider you want to add. Select `Bitbucket` from the list.

```text
Choose a Git provider
> Bitbucket
```

After selecting Bitbucket as your Git Provider, you will be prompted to enter a Username (your Atlassian username) and a Personal Access Token (App Password).

For more information on creating a Personal Access Token, visit Bitbucket's [Create an App password][bit-token] documentation.

2. Enter your Username and Personal Access Token for Daytona to authenticate and enable secure access to your Bitbucket repositories.

```text
Username
>
```

```text
Personal access token
>
```

3. Enter your Git Provider alias to identify it within Daytona.

```text
Alias                                                                         
Will default to username if left empty                                        
>
```

Upon successful authentication, Daytona will display the following message:

```text
Git provider has been registered
```

## GitHub Enterprise Server

Daytona allows you to connect your GitHub Enterprise Server account and access your repositories directly from Daytona.

1. Run the following command to add GitHub Enterprise Server as a Git Provider:

```shell
daytona git-providers add
```

Upon running this command, Daytona will prompt you to choose a Git Provider you want to add. Select `Other` from the list, and then select `GitHub Enterprise Server`.

```text
Choose a Git provider
> Other
```

```text
Choose a Git provider
> GitHub Enterprise Server
```

After selecting GitHub Enterprise Server as your Git Provider, you will be prompted to enter a Self-Managed API URL (the base URL for your GitHub Enterprise Server instance's API) and a Personal Access Token.

For more information on creating a Personal Access Token, visit GitHub's [Creating a personal access token (classic)][gh-enterprise-token] documentation.

2. Enter your Self-Managed API URL and Personal Access Token for Daytona to authenticate and enable secure access to your Github Enterprise repositories.

```text
Self-managed API URL
For example: https://github-host
>
```

```text
Personal access token
>
```

3. Enter your Git Provider alias to identify it within Daytona.

```text
Alias                                                                         
Will default to username if left empty                                        
>
```

Upon successful authentication, Daytona will display the following message:

```text
Git provider has been registered
```

## GitLab Self-Managed

Daytona allows you to connect your GitLab Self-Managed account and access your repositories directly from Daytona.

1. Run the following command to add GitLab Self-Managed as a Git Provider:

```shell
daytona git-providers add
```

Upon running this command, Daytona will prompt you to choose a Git Provider you want to add. Select `Other` from the list, and then select `GitLab Self-managed`.

```text
Choose a Git provider
> Other
```

```text
Choose a Git provider
> GitLab Self-managed
```

After selecting GitLab Self-Managed as your Git Provider, you will be prompted to enter a Self-Managed API URL (the base URL for the self-hosted GitLab API) and a Personal Access Token.

For more information on creating a Personal Access Token, visit GitLab's [Create a personal access token][gl-token] documentation.

2. Enter your Self-Managed API URL and Personal Access Token for Daytona to authenticate and enable secure access to your GitLab Self-Managed repositories.

```text
Self-managed API URL
For example: http://gitlab-host/api/v4/ 
>
```

```text
Personal access token
>
```

3. Enter your Git Provider alias to identify it within Daytona.

```text
Alias                                                                         
Will default to username if left empty                                        
>
```

Upon successful authentication, Daytona will display the following message:

```text
Git provider has been registered
```

## Bitbucket Server

Daytona allows you to connect your Bitbucket Server account and access your repositories directly from Daytona.

1. Run the following command to add Bitbucket Server as a Git Provider:

```shell
daytona git-providers add
```

Upon running this command, Daytona will prompt you to choose a Git Provider you want to add. Select `Other` from the list, and then select `Bitbucket Server`.

```text
Choose a Git provider
> Other
```

```text
Choose a Git provider
> Bitbucket Server
```

After selecting Bitbucket Server as your Git Provider, you will be prompted to enter a Username (your Atlassian username), Self-managed API URL (the base URL for your Bitbucket Server instance's API), and a Personal Access Token (App Password).

For more information on creating a Personal Access Token, visit Bitbucket's [Create an App password][bit-token] documentation.

2. Enter your Username, Self-managed API URL, and Personal Access Token for Daytona to authenticate and enable secure access to your Bitbucket Server repositories.

```text
Username
>
```

```text
Self-managed API URL
For example: https://bitbucket.host.com/rest
>
```

```text
Personal access token
>
```

3. Enter your Git Provider alias to identify it within Daytona.

```text
Alias                                                                         
Will default to username if left empty                                        
>
```

Upon successful authentication, Daytona will display the following message:

```text
Git provider has been registered
```

## Codeberg

Daytona allows you to connect your Codeberg account and access your repositories directly from Daytona.

1. Run the following command to add Codeberg as a Git Provider:

```shell
daytona git-providers add
```

Upon running this command, Daytona will prompt you to choose a Git Provider you want to add. Select `Other` from the list, and then select `Codeberg`.

```text
Choose a Git provider
> Other
```

```text
Choose a Git provider
> Codeberg
```

After selecting Codeberg as your Git Provider, you will be prompted to enter a Personal Access Token.

For more information on creating a Personal Access Token, visit Codeberg's [Generating an Access Token][codeberg-token] documentation.

2. Enter your Personal Access Token for Daytona to authenticate and enable secure access to your Codeberg repositories.

```text
Personal access token
>
```

3. Enter your Git Provider alias to identify it within Daytona.

```text
Alias                                                                         
Will default to username if left empty                                        
>
```

Upon successful authentication, Daytona will display the following message:

```text
Git provider has been registered
```

## Gitea

Daytona allows you to connect your Gitea account and access your repositories directly from Daytona.

1. Run the following command to add Gitea as a Git Provider:

```shell
daytona git-providers add
```

Upon running this command, Daytona will prompt you to choose a Git Provider you want to add. Select `Other` from the list, and then select `Gitea`.

```text
Choose a Git provider
> Other
```

```text
Choose a Git provider
> Gitea
```

After selecting Gitea as your Git Provider, you will be prompted to enter a Self-Managed API URL (the base URL for the Gitea installation's API) and a Personal Access Token.

For more information on creating a Personal Access Token, visit Gitea's [Generating and listing API tokens][gitea-token] documentation.

2. Enter your Self-Managed API URL and Personal Access Token for Daytona to authenticate and enable secure access to your Gitea repositories.

```text
Self-managed API URL
For example: http://gitea-host
>
```

```text
Personal access token
>
```

3. Enter your Git Provider alias to identify it within Daytona.

```text
Alias                                                                         
Will default to username if left empty                                        
>
```

Upon successful authentication, Daytona will display the following message:

```text
Git provider has been registered
```

## Gitness

Daytona allows you to connect your Gitness account and access your repositories directly from Daytona.

1. Run the following command to add Gitness as a Git Provider:

```shell
daytona git-providers add
```

Upon running this command, Daytona will prompt you to choose a Git Provider you want to add. Select `Other` from the list, and then select `Gitness`.

```text
Choose a Git provider
> Other
```

```text
Choose a Git provider
> Gitness
```

After selecting Gitness as your Git Provider, you will be prompted to enter a Self-Managed API URL (the base URL for the Gitness installation's API) and a Personal Access Token.

For more information on creating a Personal Access Token, visit Gitness' [Generate user token][gitness-token] documentation.

2. Enter your Self-Managed API URL and Personal Access Token for Daytona to authenticate and enable secure access to your Gitness repositories.

```text
Self-managed API URL
For example: http://gitness-host/api/v1/
>
```

```text
Personal access token
>
```

3. Enter your Git Provider alias to identify it within Daytona.

```text
Alias                                                                         
Will default to username if left empty                                        
>
```

Upon successful authentication, Daytona will display the following message:

```text
Git provider has been registered
```

## Azure DevOps

Daytona allows you to connect your Azure DevOps account and access your repositories directly from Daytona.

1. Run the following command to add Azure DevOps as a Git Provider:

```shell
daytona git-providers add
```

Upon running this command, Daytona will prompt you to choose a Git Provider you want to add. Select `Other` from the list, and then select `Azure DevOps`.

```text
Choose a Git provider
> Other
```

```text
Choose a Git provider
> Azure DevOps
```

After selecting Azure DevOps as your Git Provider, you will be prompted to enter a Self-Managed API URL (the base URL for the Azure DevOps installation's API) and a Personal Access Token.

For more information on creating a Personal Access Token, visit Azure DevOps' [Create a Personal Access Token][azuredevops-token] documentation.

2. Enter your Self-Managed API URL and Personal Access Token for Daytona to authenticate and enable secure access to your Azure DevOps repositories.

```text
Self-managed API URL
For example: https://dev.azure.com/organization
>
```

```text
Personal access token
>
```

3. Enter your Git Provider alias to identify it within Daytona.

```text
Alias                                                                         
Will default to username if left empty                                        
>
```

Upon successful authentication, Daytona will display the following message:

```text
Git provider has been registered
```

## AWS CodeCommit

Daytona allows you to connect your AWS CodeCommit account and access your repositories directly from Daytona.

1. Run the following command to add AWS CodeCommit as a Git Provider:

```shell
daytona git-providers add
```

Upon running this command, Daytona will prompt you to choose a Git Provider you want to add. Select `Other` from the list, and then select `AWS CodeCommit`.

```text
Choose a Git provider
> Other
```

```text
Choose a Git provider
> AWS CodeCommit
```

After selecting AWS CodeCommit as your Git Provider, you will be prompted to enter a Username, a Self-Managed API URL (the base URL for the AWS CodeCommit installation's API) and a Personal Access Token.

For more information on creating a Personal Access Token, visit AWS CodeCommit's [Authentication and access control][awscodecommit-token] documentation.

<Aside type="note">
The user must have configured AWS Credentials: `AWS_ACCESS_KEY_ID`, `AWS_SECRET_ACCESS_KEY`, `AWS_DEFAULT_REGION`, and have `iam:GetUser` read permission.
</Aside>

<br />

2. Enter your Username, Self-Managed API URL, and Personal Access Token for Daytona to authenticate and enable secure access to your AWS CodeCommit repositories.

```text
Username
>
```

```text
Self-managed API URL
For example: https://ap-south-1.console.aws.amazon.com
>
```

```text
Personal access token
>
```

3. Enter your Git Provider alias to identify it within Daytona.

```text
Alias                                                                         
Will default to username if left empty                                        
>
```

Upon successful authentication, Daytona will display the following message:

```text
Git provider has been registered
```

## Gogs

Daytona allows you to connect your Gogs account and access your repositories directly from Daytona.

1. Run the following command to add Gogs as a Git Provider:

```shell
daytona git-providers add
```

Upon running this command, Daytona will prompt you to choose a Git Provider you want to add. Select `Other` from the list, and then select `Gogs`.

```text
Choose a Git provider
> Other
```

```text
Choose a Git provider
> Gogs
```

After selecting Gogs as your Git Provider, you will be prompted to enter a Self-Managed API URL (the base URL for the Gogs installation's API) and a Personal Access Token.

To create a Personal Access Token follow these steps:

1. Log into Gogs, and click your profile avatar to open the user menu.
2. Click `Your Settings` in the user menu. Make sure you have admin access to the repository.
3. Navigate to `Applications` in the sidebar.
4. In the Manage personal access tokens section, click Generate New Token.
5. Type a name for your token and click Generate Token.
6. Copy and save the token securely (it won't be shown again).

<Aside type="note">
Gogs does not support fine-grained tokens. Each Personal Access Token will have full access to your account
</Aside>

<br />

2. Enter your Self-Managed API URL and Personal Access Token for Daytona to authenticate and enable secure access to your Gogs repositories.

```text
Self-managed API URL
For example: https://gogs-host.com
>
```

```text
Personal access token
>
```

3. Enter your Git Provider alias to identify it within Daytona.

```text
Alias                                                                         
Will default to username if left empty                                        
>
```

Upon successful authentication, Daytona will display the following message:

```text
Git provider has been registered
```

## Gitee

Daytona allows you to connect your Gitee account and access your repositories directly from Daytona.

1. Run the following command to add Gitee as a Git Provider:

```shell
daytona git-providers add
```

Upon running this command, Daytona will prompt you to choose a Git Provider you want to add. Select `Other` from the list, and then select `Gitee`.

```text
Choose a Git provider
> Other
```

```text
Choose a Git provider
> Gitee
```

2. Enter your Personal Access Token for Daytona to authenticate and enable secure access to your Gitee repositories.

To create a Personal Access Token follow these steps:

1. Log into Gitee, and click your profile avatar to open the user menu.
2. Click `Settings` in the user menu. Make sure you have admin access to the repository.
3. Navigate to `Personal access tokens` in the sidebar.
4. In the Manage personal access tokens section, click Generate New Token.
5. Enter a description for your token, and select following scopes:
    - `user_info`
    - `projects`
    - `pull_requests`
    - `groups`
    - `emails`
6. Click Commit to generate the token. You'll prompted to enter your password for verification.
7. Copy and save the token securely (it won't be shown again).

```text
Personal access token
>
```

3. Enter your Git Provider alias to identify it within Daytona.

```text
Alias                                                                         
Will default to username if left empty                                        
>
```

Upon successful authentication, Daytona will display the following message:

```text
Git provider has been registered
```

[gh-token]: https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens#creating-a-personal-access-token-classic
[gh-enterprise-token]: https://docs.github.com/en/enterprise-server@3.13/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens#creating-a-personal-access-token-classic
[gl-token]: https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html#create-a-personal-access-token
[bit-token]: https://support.atlassian.com/bitbucket-cloud/docs/create-an-app-password/
[codeberg-token]: https://docs.codeberg.org/advanced/access-token/
[gitea-token]: https://docs.gitea.com/1.21/development/api-usage#generating-and-listing-api-tokens
[gitness-token]: https://docs.gitness.com/administration/user-management#generate-user-token
[azuredevops-token]: https://learn.microsoft.com/en-us/azure/devops/organizations/accounts/use-personal-access-tokens-to-authenticate?view=azure-devops&tabs=Windows#create-a-pat
[awscodecommit-token]: https://docs.aws.amazon.com/codecommit/latest/userguide/auth-and-access-control.html

---
title: Providers
description: Understand Providers and configure new Targets.
sidebar:
  label: Providers
---


<Label>
  Distribution: **Open Source**
</Label>


Providers are plugins through which Daytona integrates with various technologies to create and manage development environments. Providers abstract complexities of underlying technologies and serve as the foundational engines that Daytona leverages to deploy and run your environments, whether through containerization, orchestration, or cloud-based virtual machines.

Daytona's architecture decentralizes the role of a Provider into a separate service. The [Daytona Server](/docs/usage/server) communicates with Providers to execute operations relating to Workspace creation and lifecycle management.

## Install a Provider

Daytona allows you to install a Provider to interface with the Daytona Server. Once a new Provider is installed, it manages Workspace deployment and lifecycle management.

1. Run the following command to install a Provider:

```shell
daytona provider install
```

2. Select the Provider you want to install from the list or select a specific version.

```text
Choose a provider to install
5 items
===
fly-provider
v0.0.0
aws-provider
v0.0.0
docker-provider
v0.0.0
digitalocean-provider
v0.0.0

Select a specific version
```

Upon selecting the Provider, Daytona will install and configure the chosen Provider, making it available for managing and deploying Workspaces. You can now create a [Target](/docs/configuration/targets) to use with the created Provider.

```text
Provider docker-provider has been successfully installed
```

## List Providers

Daytona allows you to list all installed Providers, providing you with an overview of the Providers available for managing Workspaces.

1. Run the following command to list all installed Providers:

```shell
daytona provider list
```

Upon running this command, Daytona will display a list of your installed Providers and their respective versions.

```text
Name                                Version               
───────────────────────────────────────────
docker-provider                     v.0.0.0
```

## Update a Provider

Daytona allows you to update an existing Provider, enabling you to apply the latest enhancements and bug fixes.

1. Run the following command to update a Provider:

```shell
daytona provider update
```

2. Select the Provider you want to update from the list.

```text
Choose a provider to update
1 item
===
docker-provider
v0.0.0
```

```text
Provider docker-provider has been successfully updated
```

## Uninstall a Provider

Daytona allows you to uninstall an existing Provider, helping you manage your Providers by removing those that are no longer needed.

1. Run the following command to uninstall a Provider:

```shell
daytona provider uninstall
```

2. Select the Provider you want to uninstall from the list.

```text
Choose a provider to uninstall
1 item
===
docker-provider
v0.0.0
```

```text
Provider docker-provider has been successfully uninstalled
```

## Docker

The Docker Provider allows Daytona to create Workspace projects as Docker containers. Daytona installs a Provider for Docker (`docker-provider`) by default and adds a default [Target](/docs/configuration/targets#docker) using the Docker Provider, allowing the creation of Workspaces on your local machine.

1. Run the following command to install a Docker Provider:

```shell
daytona provider install
```

2. Select **`docker-provider`** to install Docker as your Provider.

```text
Choose a provider to install
===
> docker-provider
  v0.0.0
```

Upon selecting the Provider, Daytona will install and configure the chosen Provider, making it available for managing and deploying Workspaces.

```text
⡿  Installing...
```

```text
Provider docker-provider has been successfully installed
```

<DocumentList>
<DocumentListItem
    title="Set a Docker Target"
    subtitle="Learn how to set a local or remote Docker Target to deploy and manage Workspaces."
    href="/docs/configuration/targets/#docker-local"
    expanded
  />
</DocumentList>

## DigitalOcean

The DigitalOcean Provider allows Daytona to create Workspace projects on DigitalOcean VMs, known as Droplets. The Provider integrates Daytona with DigitalOcean, enabling you to manage Workspaces on a flexible and scalable cloud platform.

1. Run the following command to install a DigitalOcean Provider:

```shell
daytona provider install
```

2. Select **`digitalocean-provider`** to install DigitalOcean as your Provider.

```text
Choose a provider to install
===
> digitalocean-provider
  v0.0.0
```

Upon selecting the Provider, Daytona will install and configure the chosen Provider, making it available for managing and deploying Workspaces.

```text
⡿  Installing...
```

```text
Provider digitalocean-provider has been successfully installed
```

<DocumentList>
<DocumentListItem
    title="Set a DigitalOcean Target"
    subtitle="Learn how to set a DigitalOcean Target to deploy and manage Workspaces."
    href="/docs/configuration/targets#digitalocean"
    expanded
  />
</DocumentList>

## AWS

The AWS Provider allows Daytona to create and manage Workspace projects on Amazon EC2 instances. The Provider integrates Daytona with AWS, enabling you to manage Workspaces in a scalable and flexible cloud environment.

To use the AWS Provider, ensure that your AWS programmatic access user has the `AmazonEC2FullAccess` permissions. This policy grants the necessary permissions to manage EC2 instances, which is crucial for Daytona's Workspace project creation and management.

1. Run the following command to install an AWS Provider:

```shell
daytona provider install
```

2. Select **`aws-provider`** to install AWS as your Provider.

```text
Choose a provider to install
===
> aws-provider
  v0.0.0
```

Upon selecting the Provider, Daytona will install and configure the chosen Provider, making it available for managing and deploying Workspaces.

```text
⡿  Installing...
```

```text
Provider aws-provider has been successfully installed
```

<DocumentList>
<DocumentListItem
    title="Set an AWS Target"
    subtitle="Learn how to set an AWS Target to deploy and manage Workspaces."
    href="/docs/configurationtargets#aws"
    expanded
  />
</DocumentList>

## Azure

The Azure Provider allows Daytona to create Workspace projects on Azure compute instances. The Provider integrates Daytona with Azure, enabling you to manage Workspaces in a scalable and flexible cloud environment.

<br />

1. Run the following command to install a Azure Provider:

```shell
daytona provider install
```

2. Select **`azure-provider`** to install Azure as your Provider.

```text
Choose a provider to install
===
> azure-provider
  v0.0.0
```

Upon selecting the Provider, Daytona will install and configure the chosen Provider, making it available for managing and deploying Workspaces.

```text
⡿  Installing...
```

```text
Provider azure-provider has been successfully installed
```

<DocumentList>
<DocumentListItem
    title="Set an Azure Target"
    subtitle="Learn how to set an Azure Target to deploy and manage Workspaces."
    href="/docs/configuration/targets#azure"
    expanded
  />
</DocumentList>

## GCP

The GCP Provider allows Daytona to create Workspace projects on Google Cloud Platform (GCP) compute instances. The Provider integrates Daytona with GCP, enabling you to manage Workspaces in a scalable and flexible cloud environment.

:::note
Before using the GCP Provider, ensure to create a GCP service account with the `Compute Admin` role. Download the service account key in JSON format and provide it to the GCP provider for authentication. Detailed instructions on creating and configuring the service account can be found [here](https://cloud.google.com/iam/docs/service-accounts-create#console).
:::

<br />

1. Run the following command to install a GCP Provider:

```shell
daytona provider install
```

2. Select **`gcp-provider`** to install GCP as your Provider.

```text
Choose a provider to install
===
> gcp-provider
  v0.0.0
```

Upon selecting the Provider, Daytona will install and configure the chosen Provider, making it available for managing and deploying Workspaces.

```text
⡿  Installing...
```

```text
Provider gcp-provider has been successfully installed
```

<DocumentList>
<DocumentListItem
    title="Set a GCP Target"
    subtitle="Learn how to set a GCP Target to deploy and manage Workspaces."
    href="/docs/configuration/targets#gcp"
    expanded
  />
</DocumentList>

## Hetzner

The Hetzner Provider allows Daytona to create Workspace projects on Hetzner Cloud VMs. The Provider integrates Daytona with Hetzner, enabling you to manage Workspaces in a scalable and flexible cloud environment.

<br />

1. Run the following command to install a Hetzner Provider:

```shell
daytona provider install
```

2. Select **`hetzner-provider`** to install Hetzner as your Provider.

```text
Choose a provider to install
===
> hetzner-provider
  v0.0.0
```

Upon selecting the Provider, Daytona will install and configure the chosen Provider, making it available for managing and deploying Workspaces.

```text
⡿  Installing...
```

```text
Provider hetzner-provider has been successfully installed
```

<DocumentList>
<DocumentListItem
    title="Set a Hetzner Target"
    subtitle="Learn how to set a Hetzner Target to deploy and manage Workspaces."
    href="/docs/configuration/targets#hetzner"
    expanded
  />
</DocumentList>

## Fly

The Fly Provider allows Daytona to create Workspace projects on Fly VMs, known as Fly Machines. The Provider integrates Daytona with the Fly.io platform, enabling you to manage Workspaces in a globally distributed cloud environment.

1. Run the following command to install a Fly Provider:

```shell
daytona provider install
```

2. Select **`fly-provider`** to install Fly as your Provider.

```text
Choose a provider to install
===
> fly-provider
  v0.0.0
```

Upon selecting the Provider, Daytona will install and configure the chosen Provider, making it available for managing and deploying Workspaces.

```text
⡿  Installing...
```

```text
Provider fly-provider has been successfully installed
```

<DocumentList>
<DocumentListItem
    title="Set a Fly Target"
    subtitle="Learn how to set a Fly Target to deploy and manage Workspaces."
    href="/docs/configuration/targets#fly"
    expanded
  />
</DocumentList>

---
title: Targets
description: Learn how to manage Target configuration across Workspaces.
sidebar:
  label: Targets
---


<Label>
  Distribution: **Open Source**
</Label>

A Target refers to the specific destination or environment where your development setups, facilitated by various [Providers](/docs/configuration/providers), are deployed and managed. Providers define the method and technology used to create your environments, while Targets specify the precise location or platform where these environments will reside.

A Target can be a local machine, a remote server, or a cloud instance, and it can vary based on the chosen Provider. Targets offer the flexibility to deploy and manage environments across different platforms and accounts, all within the unified interface provided by Daytona.

Once you set your Target, it becomes available for selection whenever you create a new development environment in Daytona. You can manage multiple Targets or delete those you no longer need.

## Set a Target

Daytona allows you to set a Target to use when managing Workspaces.

**Prerequisite**

- **At least [one Provider installed](/docs/configuration/providers).**

    Providers are essential for managing and deploying your Workspaces, so make sure you have configured at least one.

1. Run the following command to set a Target:

```shell
daytona target set
```

2. Select the appropriate Provider for the environment you want to deploy to.

```text
Choose a provider
4 items
===
aws-provider
v0.0.0
digitalocean-provider
v0.0.0
fly-provider
v0.0.0
docker-provider
v0.0.0
```

3. Select **`New Target`**.
4. Enter a name for your Target.

```text
Name
>
```

5. Enter the appropriate configuration options when prompted. The configuration options vary based on the selected Provider. The following example shows setting a [remote Docker Target](#docker-local).

```text
Remote Hostname
>

Remote Password
>

Remote Port
>

Remote User
Note: non-root user required
>

Sock Path
> /var/run/docker.sock

Workspace Data Dir       
The directory on the remote host where the workspace data will be stored
> /tmp/daytona-data

Remote Private Key Path
daytona_config
known_hosts
Custom path
None
```

6. Click **`Enter`** to confirm setting the Target.

```text
Target set successfully
```

:::note
Adding or updating a Target automatically sets it to be the default option for creating workspaces.
Change this by running `daytona target set-default` and selecting the Target you want or override it directly by using the `--target` flag when running `daytona create`.
:::

## List Targets

Daytona allows you to keep track of your Targets by listing all previously created Targets with their details.

1. Run the following command to list currently set Targets:

```shell
daytona target list
```

Upon running this command, Daytona will display a list of your Targets with their details. You will be able to see the Target name, the Provider it is connected to, and its configured options.

```text
Target      Provider            Options
───────────────────────────────────────────────────────────────────────
MyTarget    docker-provider     {
                                    "Sock Path": "/var/run/docker.sock"
                                }
```

## Delete a Target

Daytona allows you to delete Targets, helping you manage and remove those that are no longer needed. Once a Target is deleted, you will not be able to manage or deploy Workspaces on that Target.

1. Run the following command:

```shell
daytona target delete
```

Upon running this command, Daytona will display a list of your Targets with their details. You will be able to see the Target name, the unique identifier of the Workspace, and the repository it is connected to.

2. Press **`Enter`** on the selected Target to delete it.

```text
Choose a Target
1 item
===
MyTarget          
docker-provider
```

3. Confirm the action.

```text
Delete all workspaces within MyTarget?
You might not be able to easily remove these workspaces later.

[Yes]     [No]
```

```text
Target MyTarget removed successfully
```

## Docker (Local)

Daytona allows you to set a local Docker Target to use for deploying and managing Workspaces. The local Docker Target enables you to deploy Workspaces on your local machine using Docker.

:::note
Before setting a local Docker Target, ensure that [Docker](https://docs.docker.com/engine/install/) is installed and running on your local machine.
:::

<br />

1. Run the following command to set a Target:

```shell
daytona target set
```

2. Select **`docker-provider`** to use the Docker Provider.

```text
Choose a provider
1 item
===
docker-provider
v0.0.0
```

3. Select **`local`** to set a local Docker Target.

```text
Choose a Target
1 item
===
local
docker-provider
```

4. Enter a name for your Target.

```text
Name
>
```

5. Enter the appropriate configuration options when prompted.

```text
Sock Path
> /var/run/docker.sock
```

6. Click **`Enter`** to confirm setting the Target.

```text
Target set successfully
```

## Docker (Remote)

Daytona allows you to set a remote Docker Target to use for deploying and managing Workspaces. The remote Docker Target enables you to deploy Workspaces on a remote machine using Docker.

:::note
Before setting a remote Docker Target, ensure that [Docker](https://docs.docker.com/engine/install/) is installed and running on the remote server.
:::

<br />

1. Run the following command to set a Target:

```shell
daytona target set
```

2. Select **`docker-provider`** to use the Docker Provider.

```text
Choose a Provider
1 item
===
docker-provider
v0.0.0
```

3. Select **`New Target`** to set a remote Docker target.

```text
Choose a Target
1 item
===
+ New Target
```

4. Enter a name for your Target.

```text
Name
>
```

5. Enter the appropriate configuration options when prompted.

```text
Name
>

Remote Hostname
>

Remote Password
>

Remote Port
>

Remote User
Note: non-root user required
>

Sock Path
> /var/run/docker.sock

Workspace Data Dir       
The directory on the remote host where the workspace data will be stored
> /tmp/daytona-data

Remote Private Key Path
daytona_config
known_hosts
Custom path
None
```

6. Click **`Enter`** to confirm setting the Target.

```text
Target set successfully
```

## DigitalOcean

Daytona allows you to set a DigitalOcean Target to use for deploying and managing Workspaces.

1. Run the following command to set a Target:

```shell
daytona target set
```

2. Select **`digitalocean-provider`** to use the DigitalOcean Provider.

```text
Choose a provider
1 item
===
digitalocean-provider
v0.0.0
```

3. Select **`New Target`**.
4. Enter a name for your Target.

```text
Name
>
```

5. Enter the appropriate configuration options when prompted.

```text
Auth Token
If empty, token will be fetched from the DIGITALOCEAN_ACCESS_TOKEN environment variable.
>

Disk Size
> 

Image
>

Region
>

Size
>
```

6. Click **`Enter`** to confirm setting the Target.

```text
Target set successfully
```

## AWS

Daytona allows you to set an AWS Target to use for deploying and managing Workspaces.

1. Run the following command to set a Target:

```shell
daytona target set
```

2. Select **`aws-provider`** to use the AWS Provider.

```text
Choose a provider
1 item
===
aws-provider
v0.0.0
```

3. Select **`New Target`**.
4. Enter a name for your Target.

```text
Name
>
```

5. Enter the appropriate configuration options when prompted.

```text
The type of instance to launch. Default is t2.micro. 
List of available instance types https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/i
>

Region
The geographic area where AWS resources are hosted. Default is us-east-1.
List of available regions https://docs.aws.amazon.com/general/latest/gr/rande.html
> 

Secret Access Key
Find this in the AWS Console under "My Security Credentials" (https://aws.amazon.com/premiumsupport/knowledge-center/manage-access-keys/).
Leave blank if you've set the AWS_SECRET_ACCESS_KEY environment variable, or enter your key here.
>

Volume Size
The size of the instance volume, in GB. Default is 20 GB.
It is recommended that the disk size should be more than 20 GB.
List of volume size limits: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/volume_limits.html
>

Volume Type
The type of volume. Default is gp3.
List of available volume types https://docs.aws.amazon.com/ebs/latest/userguide/ebs-volume-types.html
>
```

6. Click **`Enter`** to confirm setting the Target.

```text
Target set successfully
```

## Azure

Daytona allows you to set an Azure Target to use for deploying and managing Workspaces.

1. Run the following command to set a Target:

```shell
daytona target set
```

2. Select **`azure-provider`** to use the Azure Provider.

```text
Choose a provider
1 item
===
azure-provider
v0.0.0
```

3. Select **`New Target`**.
4. Enter a name for your Target.

```text
Name
>
```

5. Enter the appropriate configuration options when prompted.

```text
Client ID
Leave blank if you've set the AZURE_CLIENT_ID environment variable, or enter your Client Id here.
To find the this, look for "appId" in the output after generating client credentials.
https://learn.microsoft.com/en-us/cli/azure/azure-cli-sp-tutorial-1?tabs=bash
>

Client Secret
Leave blank if you've set the AZURE_CLIENT_SECRET environment variable, or enter your Client     
Secret here.
To find the this, look for "password" in the output after generating client credentials
https://learn.microsoft.com/en-us/cli/azure/azure-cli-sp-tutorial-1?tabs=bash
>

Disk Size
The size of the instance volume, in GB. Default is 30 GB. It is recommended that the disk size should be more than 30 GB.
>

Disk Type
The type of the azure managed disk. Default is StandardSSD_LRS. List of available disk types:                                                                    
https://docs.microsoft.com/azure/virtual-machines/linux/disks-typesList of available disk types per location can be retrieved using the command:
az vm list-skus --location <your-region> --output table
>

Image URN
The identifier of the Azure virtual machine image to launch an instance. Default is Canonical:ubuntu-24_04-lts:server:latest.
List of available images:
https://learn.microsoft.com/en-us/azure/virtual-machines/linux/cli-ps-findimage
>

Region
The geographic area where Azure resources are hosted. Default is centralus.
List of available regions can be retrieved using the command:
"az account list-locations -o table"
>

Resource Group
If not set, Daytona will create a "daytona" resource group. How to create resource group:
https://learn.microsoft.com/en-us/azure/azure-resource-manager/management/manage-resource-groups-portal
>

Subscription ID
Leave blank if you've set the AZURE_SUBSCRIPTION_ID environment variable, or enter your Subscription Id here.
How to find subscription id:                                                                     
https://learn.microsoft.com/en-us/azure/azure-portal/get-subscription-tenant-id#find-your-azure-subscription
>

Tenant ID
Leave blank if you've set the AZURE_TENANT_ID environment variable, or enter your Tenant Id here.
To find the this, look for "tenant" in the output after generating client credentials.           
https://learn.microsoft.com/en-us/cli/azure/azure-cli-sp-tutorial-1?tabs=bash
>

VM Size
Leave blank if you've set the AZURE_TENANT_ID environment variable, or enter your Tenant Id here.
To find the this, look for "tenant" in the output after generating client credentials.           
https://learn.microsoft.com/en-us/cli/azure/azure-cli-sp-tutorial-1?tabs=bash
>
```

6. Click **`Enter`** to confirm setting the Target.

```text
Target set successfully
```

## GCP

Daytona allows you to set a Google Cloud Platform (GCP) Target to use for deploying and managing Workspaces.

1. Run the following command to set a Target:

```shell
daytona target set
```

2. Select **`gcp-provider`** to use the GCP Provider.

```text
Choose a provider
1 item
===
gcp-provider
v0.0.0
```

3. Select **`New Target`**.
4. Enter a name for your Target.

```text
Name
>
```

5. Enter the appropriate configuration options when prompted.

```text
Disk Size
The size of the instance volume, in GB. Default is 20 GB.
>

Disk Type
The GCP disk type to use for the VM. Default is pd-standard.
https://cloud.google.com/compute/docs/disks
List of available disk types can be retrieved using the command:
gcloud compute disk-types list
>

Machine Type
The GCP machine type to use for the VM. Default is List n1-standard-1.
https://cloud.google.com/compute/docs/general-purpose-machines
List of available machine types can be retrieved using the command:
gcloud compute machine-types list
>

Project ID
The GCP project ID where the resources will be created.
Leave blank if you've set the GCP_PROJECT_ID.
How to locate the project ID:
https://support.google.com/googleapi/answer/7014113?hl=en
>

VM Image
The GCP image to use for the VM.
Default is projects/ubuntu-os-cloud/global/images/family/ubuntu-2204-lts
https://cloud.google.com/compute/docs/images
List of available images can be retrieved using the command:
gcloud compute images list
>

Zone
The GCP zone where the resources will be created. Default is us-central1-a.
https://cloud.google.com/compute/docs/regions-zones
List of available zones can be retrieved using the command:
gcloud compute zones list
>

Credential File
Full path to the GCP service account JSON key file.
Leave blank if you've set the GCP_CREDENTIAL_FILE environment variable.
Ensure that the file is secure and accessible only to authorized users.
>
```

6. Click **`Enter`** to confirm setting the Target.

```text
Target set successfully
```

## Hetzner

Daytona allows you to set a Hetzner Target to use for deploying and managing Workspaces.

1. Run the following command to set a Target:

```shell
daytona target set
```

2. Select **`hetzner-provider`** to use the Hetzner Provider.

```text
Choose a provider
1 item
===
hetzner-provider
v0.0.0
```

3. Select **`New Target`**.
4. Enter a name for your Target.

```text
Name
>
```

5. Enter the appropriate configuration options when prompted.

```text
API Token
If empty, token will be fetched from the HETZNER_API_TOKEN environment        
variable.
>

Disk Image
The Hetzner image to use for the VM. Default is ubuntu-24.04.
https://docs.hetzner.com/robot/dedicated-server/operating-systems/standard-   
images
>

Disk Size
The size of the instance volume, in GB. Default is 20 GB.
>

Location
The locations where the resources will be created. Default is fsn1.
https://docs.hetzner.com/cloud/general/locations
>

Location
Server Type
The Hetzner server type to use for the VM. Default is List cpx11.
https://docs.hetzner.com/cloud/servers/overview
>
```

6. Click **`Enter`** to confirm setting the Target.

```text
Target set successfully
```

## Fly

Daytona allows you to set a DigitalOcean Target to use for deploying and managing Workspaces.

1. Run the following command to set a Target:

```shell
daytona target set
```

2. Select **`fly-provider`** to use the Fly Provider.

```text
Choose a provider
1 item
===
fly-provider
v0.0.0
```

3. Select **`New Target`**.
4. Enter a name for your Target.

```text
Name
>
```

5. Enter the appropriate configuration options when prompted.

```text
Auth Token
If empty, token will be fetched from the FLY_ACCESS_TOKEN environment variable. 
>

Disk Size
The size of the disk in GB.
> 

Org Slug
The organization name to create the fly machine in.
>

Region
The region where the fly machine resides. If not specified, near region will be used.
>

Size
The size of the fly machine. Default is shared-cpu-4x. 
List of available sizes https://fly.io/docs/about/pricing/#started-fly-machines
>
```

6. Click **`Enter`** to confirm setting the Target.

```text
Target set successfully
```

---
title: Documentation Home
description: Start managing your Workspaces with Daytona.
template: doc
head:
  - tag: title
    content: Documentation · Daytona
  - tag: meta
    attrs:
        property: og:title
        content: Documentation · Daytona
  - tag: meta
    attrs:
        name: twitter:title
        content: Documentation · Daytona
tableOfContents: false
---


<DocumentList title="Start Here">
  <DocumentListItem
    title="What is Daytona?"
    subtitle="Learn about Daytona and how it can help you manage your development environments."
    href="about/what-is-daytona"
  />
  <DocumentListItem
    title="Getting Started"
    subtitle="Get started with Daytona and learn how to use and configure your development environments."
    href="about/getting-started"
  />
  <DocumentListItem
    title="Install Daytona"
    subtitle="Install Daytona on Linux, macOS, or Windows operating system."
    href="installation/installation"
    expanded
  />
</DocumentList>

<DocumentList title="Configure">
  <DocumentListItem
    title="Add a Git Provider"
    subtitle="Create Workspaces from repositories hosted across GitHub, GitLab, Bitbucket, and others."
    href="configuration/git-providers#add-a-git-provider"
  />
  <DocumentListItem
    title="Install a Provider"
    subtitle="Install a new Provider to interface with the Daytona Server and manage your Workspaces."
    href="configuration/providers#managing-providers"
  />
    <DocumentListItem
    title="Officially Supported Providers"
    subtitle="View the list of officially supported Providers that Daytona can use to manage Workspaces."
    href="configuration/providers#officially-supported-providers"
  />
  <DocumentListItem
    title="Set a Target"
    subtitle="Set a Target configuration that governs how Daytona manages and deploys Workspaces."
    href="configuration/providers#managing-targets"
  />
</DocumentList>

<DocumentList title="Use">
  <DocumentListItem
    title="Create a Workspace"
    subtitle="Create a development environment from a Git repository and start deploying."
    href="usage/workspaces"
  />
  <DocumentListItem
    title="Set Default IDE"
    subtitle="Automatically open your Workspace in Visual Studio Code and a selection of JetBrains IDEs."
    href="usage/ide#set-the-default-ide"
  />
  <DocumentListItem
    title="Build a Container Image"
    subtitle="Use Builders to create a development container image for your Workspace."
    href="usage/builders"
  />
  <DocumentListItem
    title="Configure Daytona Server"
    subtitle="Daytona Server runs on your machine and handles actions relating to Workspaces."
    href="usage/server"
  />
</DocumentList>

<DocumentList title="Dive Deeper">
  <DocumentListItem
    title="CLI Reference"
    subtitle="Learn about the Daytona CLI and how to interact with Daytona from the command line."
    href="tools/cli"
  />
  <DocumentListItem
    title="API Reference"
    subtitle="Explore the Daytona API and learn how to interact with Daytona programmatically."
    href="tools/api"
  />
</DocumentList>

---
title: Installation
description: Learn how to install Daytona on Linux, macOS, and Windows.
sidebar:
  label: Installation
---

import { Tabs, TabItem } from '@astrojs/starlight/components';
import Homebrew from './method/homebrew.mdx'
import Nix from './method/nix.mdx'
import ScriptPowerShell from './method/script-powershell.mdx'
import ScriptUnix from './method/script-unix.mdx'
import Uninstall from './method/uninstall.mdx'

Install Daytona on Linux, macOS, and Windows systems.
Each operating system supports both `x86_64` and `ARM64` architectures.

Daytona leverages [Docker](https://docs.docker.com/engine/install/) to create and manage isolated development environments.

## Installation

<br />

<Tabs>
<TabItem label="Linux">

Install Daytona on Linux using the following installation script:

```shell
(curl -sf -L https://download.daytona.io/daytona/install.sh | sudo bash) && daytona server -y && daytona
```

:::note
You can install Daytona by manually downloading the binary and placing it in your `PATH`.

```shell
# x86-64
curl -sf -L https://download.daytona.io/daytona/v0.50/daytona-linux-amd64 -o daytona
# ARM64
curl -sf -L https://download.daytona.io/daytona/v0.50/daytona-linux-arm64 -o daytona
```

:::

</TabItem>
<TabItem label="MacOS">

Install Daytona on macOS using the following installation script:

```shell
(curl -sf -L https://download.daytona.io/daytona/install.sh | sudo bash) && daytona server -y && daytona
```

:::note
You can install Daytona by manually downloading the binary and placing it in your `PATH`.

```shell
# x86-64/Intel-based
curl -sf -L https://download.daytona.io/daytona/v0.50/daytona-darwin-amd64 -o daytona
# ARM64/Apple Silicon
curl -sf -L https://download.daytona.io/daytona/v0.50/daytona-darwin-arm64 -o daytona
```

:::

</TabItem>
<TabItem label="Windows">
Install Daytona on Windows using the following PowerShell script:

```powershell
$architecture = if ($env:PROCESSOR_ARCHITECTURE -eq "AMD64") { "amd64" } else { "arm64" }
md -Force "$Env:APPDATA\bin\daytona"; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]'Tls,Tls11,Tls12';
Invoke-WebRequest -URI "https://download.daytona.io/daytona/v0.50/daytona-windows-$architecture.exe" -OutFile "$Env:APPDATA\bin\daytona\daytona.exe";
$env:Path += ";" + $Env:APPDATA + "\bin\daytona"; [Environment]::SetEnvironmentVariable("Path", $env:Path, [System.EnvironmentVariableTarget]::User);
daytona serve;
```

:::note
You can install Daytona by manually downloading the binary and placing it in your `PATH`.

```sh
# x86-64
curl -sf -L https://download.daytona.io/daytona/v0.50/daytona-windows-amd64.exe -o daytona
# AArch64
curl -sf -L https://download.daytona.io/daytona/v0.50/daytona-windows-arm64.exe -o daytona
```

:::

<br />

:::tip
If you are using Windows Subsystem for Linux (WSL), you can follow the [instructions](https://github.com/daytonaio/daytona/issues/282) on how to run Daytona when using an IDE reliant on the SSH client.
:::
</TabItem>
<TabItem label="Homebrew">
<Homebrew />
</TabItem>
<TabItem label="Nix">
<Nix />
</TabItem>
</Tabs>

## Uninstallation

<Uninstall />

---
title: Telemetry
description: Information about telemetry data gathered by Daytona.
sidebar:
  label: Telemetry
---


<Label>
  Distribution: **Open Source**, **Self-Managed**
</Label>

All telemetry data is **completely anonymous** and **does not** include any personally identifiable information (PII) or user secrets.
Participation is optional and you may opt-out at any time.

## The Goal

The goal of gathering telemetry data in the CLI is exclusively for the purpose of improving the Daytona ecosystem.
Data gathered from the CLI will allow us to gain more insights into the usage of the binary, help us track errors and improve user experience.

The data **does** include:

- **CLI command usage**

  This includes the name of the command that was run, how it was called (e.g., was an alias used?),
  the source (e.g., local CLI or inside of a project), the version of the binary, and the execution time.

- **API server request and response data**

  In the request and response payloads, only public data is included.
  This data may include any public git repositories used to create workspaces and any public container images used to create workspaces.

  The data also includes the path of the request, with URL parameters that might include PII stripped (e.g., URI: `/workspace/:workspaceId/:projectName/state` is provided as is,
  with `workspaceId` and `projectName` not provided to the telemetry service).
  Additionally, the request method, binary version, query, and source are gathered.

- **Relevant server events**

  Currently, only workspace lifecycle events are gathered (creation, stop, start, delete, etc.), but this might be expanded in the future.

The data **does not** include:

- **CLI command arguments**

  Arguments might contain PII or user secrets, so they are left out.

- **Full API request and response payloads**

  Payloads may contain PII or user secrets, so only public data is shared with the telemetry collection service.

- **Environment variables**

  Any environment variables set on projects created by the user, including Daytona-set environment variables, are not included.

- **Geolocation information and IP address**

  No geolocation information about the user or their IP address is included.

## Gathering Policy

Telemetry gathering in the CLI is **opt-out**. This means that telemetry data is gathered by default because it does not include any PII.

- To disable telemetry, users can run `daytona telemetry disable`.

- To enable telemetry, users can run `daytona telemetry enable`.

## CLI Identifier

All telemetry events contain a unique identifier. The ID is set in the CLI configuration.
The purpose of this identifier is to provide a way to aggregate telemetry data from the same CLI across different sessions and workspaces.
This means that the CLI ID is shared between the CLI and any workspaces the user might create.

## Data Protection

We use <a href="https://posthog.com/" target="_blank">Posthog</a> as our Telemetry service of choice.
The data is stored in the EU under the Daytona organization account.
The data is available only to a subset of Daytona maintainers and is only used for the purpose of improving the Daytona ecosystem.
The telemetry data that we track has never and will never be sold or monetized in any form.

## Debugging

Telemetry events can be debugged by setting `LOG_LEVEL=trace` which will output information about the telemetry event queue.

---
title: Troubleshooting
description: Troubleshooting Daytona
sidebar:
  label: Troubleshooting
---

You can use the following troubleshooting tips to resolve common issues with Daytona.

## Connectivity Issues

### VPNs and Firewalls

If your VPN is configured to handle all IP traffic or if your Firewall is configured to block certain IP addresses, they may prevent Daytona from successfully connecting to our reverse proxy service.
The issue can be manifested in different ways, including:

- Unable to start the Daytona Server due to a `control not running` error
- Unable to successfully create Workspaces due to a `Failed to connect to server: Get "http://server/health": lookup server...` error
- Unable to enter a Workspace using `daytona code` or `daytona ssh` due to a timeout in establishing a Tailscale connection

To work around this issue, you may need to add the following IP address exceptions to your VPN or Firewall:

- `35.198.165.62` - Europe-based reverse proxy
- `34.133.75.4` - US-based reverse proxy

---
title: CLI
description: A reference of supported operations using the Daytona CLI.
sidebar:
  label: Daytona CLI Reference
---

<Label>
  Distribution: **Open Source**, **Cloud**, **Self-Managed**
</Label>

The `daytona` command-line tool provides access to Daytona's core features.
You can use the `daytona` tool for the following operations:

*   Managing the lifecycle of the Daytona Server.
*   Managing [Workspaces](../usage/workspaces), [Git Providers](../configuration/git-providers), [Providers](../configuration/providers), and other Daytona components.
*   Configuring the [Daytona Server](../configuration/server) interactively.

This reference lists all commands supported by the `daytona` command-line tool complete with a description of their behaviour, and any supported flags.
You can access this documentation on a per-command basis by appending the `--help`/`-h` flag when invoking `daytona`.

<Aside type="note">
This reference does not apply to the `daytona` command when run inside of a Workspace.
</Aside>

## daytona
Daytona is a Dev Environment Manager

```shell
daytona [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--help` |  | help for daytona |
| `--version` | `-v` | Display the version of Daytona |


## daytona api-key
Api Key commands

```shell
daytona api-key [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--help` |  | help for daytona |


## daytona api-key generate
Generate a new API key

```shell
daytona api-key generate [NAME] [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--help` |  | help for daytona |


## daytona api-key list
List API keys

```shell
daytona api-key list [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--format` | `-f` | Output format. Must be one of (yaml, json) |
| `--help` |  | help for daytona |


## daytona api-key revoke
Revoke an API key

```shell
daytona api-key revoke [NAME] [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--yes` | `-y` | Skip confirmation prompt |
| `--help` |  | help for daytona |


## daytona autocomplete
Adds a completion script for your shell environment

```shell
daytona autocomplete [bash|zsh|fish|powershell] [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--help` |  | help for daytona |

<Aside type="note">
If using bash shell environment, make sure you have bash-completion installed in order to get full autocompletion functionality.
Linux Installation: ```sudo apt-get install bash-completion```
macOS Installation: ```brew install bash-completion```
</Aside>

## daytona build
Manage builds

```shell
daytona build [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--help` |  | help for daytona |


## daytona build delete
Delete a build

```shell
daytona build delete [BUILD] [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--all` | `-a` | Delete ALL builds |
| `--force` | `-f` | Force delete build |
| `--prebuild-id` |  | Delete ALL builds from prebuild |
| `--help` |  | help for daytona |


## daytona build info
Show build info

```shell
daytona build info [BUILD] [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--format` | `-f` | Output format. Must be one of (yaml, json) |
| `--help` |  | help for daytona |


## daytona build list
List all builds

```shell
daytona build list [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--format` | `-f` | Output format. Must be one of (yaml, json) |
| `--help` |  | help for daytona |


## daytona build logs
View logs for build

```shell
daytona build logs [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--follow` | `-f` | Follow logs |
| `--help` |  | help for daytona |


## daytona build run
Run a build from a project config

```shell
daytona build run [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--help` |  | help for daytona |


## daytona code
Open a workspace in your preferred IDE

```shell
daytona code [WORKSPACE] [PROJECT] [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--ide` | `-i` | Specify the IDE (vscode, browser, cursor, ssh, jupyter, fleet, zed, clion, goland, intellij, phpstorm, pycharm, rider, rubymine, webstorm) |
| `--yes` | `-y` | Automatically confirm any prompts |
| `--help` |  | help for daytona |


## daytona config
Output Daytona configuration

```shell
daytona config [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--format` | `-f` | Output format. Must be one of (yaml, json) |
| `--show-api-keys` | `-k` | Show API keys |
| `--help` |  | help for daytona |


## daytona container-registry
Manage container registries

```shell
daytona container-registry [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--help` |  | help for daytona |


## daytona container-registry delete
Delete a container registry

```shell
daytona container-registry delete [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--help` |  | help for daytona |


## daytona container-registry list
Lists container registries

```shell
daytona container-registry list [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--format` | `-f` | Output format. Must be one of (yaml, json) |
| `--help` |  | help for daytona |


## daytona container-registry set
Set container registry

```shell
daytona container-registry set [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--password` | `-p` | Password |
| `--server` | `-s` | Server |
| `--username` | `-u` | Username |
| `--help` |  | help for daytona |


## daytona create
Create a workspace

```shell
daytona create [REPOSITORY_URL | PROJECT_CONFIG_NAME]... [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--blank` |  | Create a blank project without using existing configurations |
| `--branch` |  | Specify the Git branches to use in the projects |
| `--builder` |  | Specify the builder (currently auto/devcontainer/none) |
| `--custom-image` |  | Create the project with the custom image passed as the flag value; Requires setting --custom-image-user flag as well |
| `--custom-image-user` |  | Create the project with the custom image user passed as the flag value; Requires setting --custom-image flag as well |
| `--devcontainer-path` |  | Automatically assign the devcontainer builder with the path passed as the flag value |
| `--env` |  | Specify environment variables (e.g. --env 'KEY1=VALUE1' --env 'KEY2=VALUE2' ...') |
| `--git-provider-config` |  | Specify the Git provider configuration ID or alias |
| `--ide` | `-i` | Specify the IDE (vscode, browser, cursor, ssh, jupyter, fleet, zed, clion, goland, intellij, phpstorm, pycharm, rider, rubymine, webstorm) |
| `--manual` |  | Manually enter the Git repository |
| `--multi-project` |  | Workspace with multiple projects/repos |
| `--name` |  | Specify the workspace name |
| `--no-ide` | `-n` | Do not open the workspace in the IDE after workspace creation |
| `--target` | `-t` | Specify the target (e.g. 'local') |
| `--yes` | `-y` | Automatically confirm any prompts |
| `--help` |  | help for daytona |


## daytona delete
Delete a workspace

```shell
daytona delete [WORKSPACE] [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--all` | `-a` | Delete all workspaces |
| `--force` | `-f` | Delete a workspace by force |
| `--yes` | `-y` | Confirm deletion without prompt |
| `--help` |  | help for daytona |


## daytona docs
Opens the Daytona documentation in your default browser.

```shell
daytona docs [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--help` |  | help for daytona |


## daytona env
Manage profile environment variables that are added to all workspaces


```shell
daytona env [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--help` |  | help for daytona |


## daytona env list
List profile environment variables

```shell
daytona env list [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--format` | `-f` | Output format. Must be one of (yaml, json) |
| `--help` |  | help for daytona |


## daytona env set
Set profile environment variables

```shell
daytona env set [KEY=VALUE]... [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--help` |  | help for daytona |


## daytona forward
Forward a port from a project to your local machine

```shell
daytona forward [PORT] [WORKSPACE] [PROJECT] [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--public` |  | Should be port be available publicly via an URL |
| `--help` |  | help for daytona |


## daytona git-providers
Manage Git providers

```shell
daytona git-providers [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--help` |  | help for daytona |


## daytona git-providers add
Register a Git provider

```shell
daytona git-providers add [GIT_PROVIDER_ID] [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--alias` | `-a` | Alias |
| `--base-api-url` | `-b` | Base API Url |
| `--signing-key` | `-k` | Signing Key |
| `--signing-method` | `-s` | Signing Method (ssh, gpg) |
| `--token` | `-t` | Personal Access Token |
| `--username` | `-u` | Username |
| `--help` |  | help for daytona |


## daytona git-providers delete
Unregister a Git provider

```shell
daytona git-providers delete [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--all` | `-a` | Remove all Git providers |
| `--yes` | `-y` | Confirm deletion without prompt |
| `--help` |  | help for daytona |


## daytona git-providers list
Lists your registered Git providers

```shell
daytona git-providers list [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--format` | `-f` | Output format. Must be one of (yaml, json) |
| `--help` |  | help for daytona |


## daytona git-providers update
Update a Git provider

```shell
daytona git-providers update [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--help` |  | help for daytona |


## daytona ide
Choose the default IDE

```shell
daytona ide [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--help` |  | help for daytona |


## daytona info
Show workspace info

```shell
daytona info [WORKSPACE] [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--format` | `-f` | Output format. Must be one of (yaml, json) |
| `--help` |  | help for daytona |


## daytona list
List workspaces

```shell
daytona list [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--format` | `-f` | Output format. Must be one of (yaml, json) |
| `--verbose` | `-v` | Show verbose output |
| `--help` |  | help for daytona |


## daytona logs
View logs for a workspace/project

```shell
daytona logs [WORKSPACE] [PROJECT_NAME] [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--follow` | `-f` | Follow logs |
| `--workspace` | `-w` | View workspace logs |
| `--help` |  | help for daytona |


## daytona prebuild
Manage prebuilds

```shell
daytona prebuild [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--help` |  | help for daytona |


## daytona prebuild add
Add a prebuild configuration

```shell
daytona prebuild add [PROJECT_CONFIG] [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--branch` | `-b` | Git branch for the prebuild |
| `--commit-interval` | `-c` | Commit interval for running a prebuild - leave blank to ignore push events |
| `--retention` | `-r` | Maximum number of resulting builds stored at a time |
| `--run` |  | Run the prebuild once after adding it |
| `--trigger-files` | `-t` | Full paths of files whose changes should explicitly trigger a  prebuild |
| `--help` |  | help for daytona |


## daytona prebuild delete
Delete a prebuild configuration

```shell
daytona prebuild delete [PROJECT_CONFIG] [PREBUILD] [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--force` | `-f` | Force delete prebuild |
| `--help` |  | help for daytona |


## daytona prebuild info
Show prebuild configuration info

```shell
daytona prebuild info [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--format` | `-f` | Output format. Must be one of (yaml, json) |
| `--help` |  | help for daytona |


## daytona prebuild list
List prebuild configurations

```shell
daytona prebuild list [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--format` | `-f` | Output format. Must be one of (yaml, json) |
| `--help` |  | help for daytona |


## daytona prebuild update
Update a prebuild configuration

```shell
daytona prebuild update [PROJECT_CONFIG] [PREBUILD_ID] [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--branch` | `-b` | Git branch for the prebuild |
| `--commit-interval` | `-c` | Commit interval for running a prebuild - leave blank to ignore push events |
| `--retention` | `-r` | Maximum number of resulting builds stored at a time |
| `--run` |  | Run the prebuild once after updating it |
| `--trigger-files` | `-t` | Full paths of files whose changes should explicitly trigger a  prebuild |
| `--help` |  | help for daytona |


## daytona profile
Manage profiles

```shell
daytona profile [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--help` |  | help for daytona |


## daytona profile add
Add profile

```shell
daytona profile add [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--api-key` | `-k` | API Key |
| `--api-url` | `-a` | API URL |
| `--name` | `-n` | Profile name |
| `--help` |  | help for daytona |


## daytona profile delete
Delete profile [PROFILE_NAME]

```shell
daytona profile delete [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--help` |  | help for daytona |


## daytona profile edit
Edit profile [PROFILE_NAME]

```shell
daytona profile edit [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--api-key` | `-k` | API Key |
| `--api-url` | `-a` | API URL |
| `--name` | `-n` | Profile name |
| `--help` |  | help for daytona |


## daytona profile list
List profiles

```shell
daytona profile list [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--format` | `-f` | Output format. Must be one of (yaml, json) |
| `--help` |  | help for daytona |


## daytona project-config
Manage project configs

```shell
daytona project-config [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--help` |  | help for daytona |


## daytona project-config add
Add a project config

```shell
daytona project-config add [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--builder` |  | Specify the builder (currently auto/devcontainer/none) |
| `--custom-image` |  | Create the project with the custom image passed as the flag value; Requires setting --custom-image-user flag as well |
| `--custom-image-user` |  | Create the project with the custom image user passed as the flag value; Requires setting --custom-image flag as well |
| `--devcontainer-path` |  | Automatically assign the devcontainer builder with the path passed as the flag value |
| `--env` |  | Specify environment variables (e.g. --env 'KEY1=VALUE1' --env 'KEY2=VALUE2' ...') |
| `--git-provider-config` |  | Specify the Git provider configuration ID or alias |
| `--manual` |  | Manually enter the Git repository |
| `--name` |  | Specify the project config name |
| `--help` |  | help for daytona |


## daytona project-config delete
Delete a project config

```shell
daytona project-config delete [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--all` | `-a` | Delete all project configs |
| `--force` | `-f` | Force delete prebuild |
| `--yes` | `-y` | Confirm deletion without prompt |
| `--help` |  | help for daytona |


## daytona project-config export
Export a project config

```shell
daytona project-config export [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--all` | `-a` | Export all project configs |
| `--format` | `-f` | Output format. Must be one of (yaml, json) |
| `--help` |  | help for daytona |


## daytona project-config import
Import project config from JSON

```shell
daytona project-config import [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--file` | `-f` | Import project config from a JSON file. Use '-' to read from stdin. |
| `--help` |  | help for daytona |


## daytona project-config info
Show project config info

```shell
daytona project-config info [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--format` | `-f` | Output format. Must be one of (yaml, json) |
| `--help` |  | help for daytona |


## daytona project-config list
Lists project configs

```shell
daytona project-config list [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--format` | `-f` | Output format. Must be one of (yaml, json) |
| `--help` |  | help for daytona |


## daytona project-config set-default
Set project config info

```shell
daytona project-config set-default [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--help` |  | help for daytona |


## daytona project-config update
Update a project config

```shell
daytona project-config update [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--help` |  | help for daytona |


## daytona provider
Manage providers

```shell
daytona provider [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--help` |  | help for daytona |


## daytona provider install
Install provider

```shell
daytona provider install [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--yes` | `-y` | Automatically confirm any prompts |
| `--help` |  | help for daytona |


## daytona provider list
List installed providers

```shell
daytona provider list [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--format` | `-f` | Output format. Must be one of (yaml, json) |
| `--help` |  | help for daytona |


## daytona provider uninstall
Uninstall provider

```shell
daytona provider uninstall [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--help` |  | help for daytona |


## daytona provider update
Update provider

```shell
daytona provider update [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--all` | `-a` | Update all providers |
| `--help` |  | help for daytona |


## daytona purge
Purges all Daytona data from the current device

```shell
daytona purge [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--force` | `-f` | Delete all workspaces by force |
| `--yes` | `-y` | Execute purge without prompt |
| `--help` |  | help for daytona |


## daytona restart
Restart a workspace

```shell
daytona restart [WORKSPACE] [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--project` | `-p` | Restart a single project in the workspace (project name) |
| `--help` |  | help for daytona |


## daytona serve
Run the server process in the current terminal session

```shell
daytona serve [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--help` |  | help for daytona |


## daytona server
Start the server process in daemon mode

```shell
daytona server [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--yes` | `-y` | Skip the confirmation prompt |
| `--help` |  | help for daytona |


## daytona server config
Output local Daytona Server config

```shell
daytona server config [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--format` | `-f` | Output format. Must be one of (yaml, json) |
| `--help` |  | help for daytona |


## daytona server configure
Configure Daytona Server

```shell
daytona server configure [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--help` |  | help for daytona |


## daytona server logs
Output Daytona Server logs

```shell
daytona server logs [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--file` |  | Read specific log file |
| `--follow` | `-f` | Follow logs |
| `--local` | `-l` | Read local server log files |
| `--help` |  | help for daytona |


## daytona server logs list
Lists Daytona Server Log Files

```shell
daytona server logs list [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--help` |  | help for daytona |


## daytona server restart
Restarts the Daytona Server daemon

```shell
daytona server restart [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--help` |  | help for daytona |


## daytona server start
Start the Daytona Server daemon

```shell
daytona server start [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--help` |  | help for daytona |


## daytona server stop
Stops the Daytona Server daemon

```shell
daytona server stop [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--help` |  | help for daytona |


## daytona ssh
SSH into a project using the terminal

```shell
daytona ssh [WORKSPACE] [PROJECT] [CMD...] [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--edit` | `-e` | Edit the project's SSH config |
| `--option` | `-o` | Specify SSH options in KEY=VALUE format. |
| `--yes` | `-y` | Automatically confirm any prompts |
| `--help` |  | help for daytona |


## daytona start
Start a workspace

```shell
daytona start [WORKSPACE] [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--all` | `-a` | Start all workspaces |
| `--code` | `-c` | Open the workspace in the IDE after workspace start |
| `--project` | `-p` | Start a single project in the workspace (project name) |
| `--yes` | `-y` | Automatically confirm any prompts |
| `--help` |  | help for daytona |


## daytona stop
Stop a workspace

```shell
daytona stop [WORKSPACE] [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--all` | `-a` | Stop all workspaces |
| `--project` | `-p` | Stop a single project in the workspace (project name) |
| `--help` |  | help for daytona |


## daytona target
Manage provider targets

```shell
daytona target [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--help` |  | help for daytona |


## daytona target list
List targets

```shell
daytona target list [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--format` | `-f` | Output format. Must be one of (yaml, json) |
| `--help` |  | help for daytona |


## daytona target remove
Remove target

```shell
daytona target remove [TARGET_NAME] [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--yes` | `-y` | Confirm deletion of all workspaces without prompt |
| `--help` |  | help for daytona |


## daytona target set-default
Set target to be used by default

```shell
daytona target set-default [TARGET_NAME] [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--help` |  | help for daytona |


## daytona target set
Set provider target

```shell
daytona target set [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--file` | `-f` | Path to JSON file for target configuration, use '-' to read from stdin |
| `--help` |  | help for daytona |


## daytona telemetry
Manage telemetry collection

```shell
daytona telemetry [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--help` |  | help for daytona |


## daytona telemetry disable
Disable telemetry collection

```shell
daytona telemetry disable [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--help` |  | help for daytona |


## daytona telemetry enable
Enable telemetry collection

```shell
daytona telemetry enable [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--help` |  | help for daytona |


## daytona update
Update Daytona CLI

```shell
daytona update [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--version` | `-v` | Version to update to |
| `--help` |  | help for daytona |


## daytona use
Use profile [PROFILE_NAME]

```shell
daytona use [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--help` |  | help for daytona |


## daytona version
Print the version number

```shell
daytona version [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--help` |  | help for daytona |


## daytona whoami
Display information about the active user

```shell
daytona whoami [flags]
```

__Flags__
| Long | Short | Description |
| :--- | :---- | :---------- |
| `--format` | `-f` | Output format. Must be one of (yaml, json) |
| `--help` |  | help for daytona |

---
title: Docker Extension
description: Learn how to use the Daytona Docker extension to create, open, list, and delete Workspaces.
---


<Label>
  Distribution: **Open Source**, **Self-Managed**
</Label>

Daytona provides a Docker Extension for using an embedded version of the Daytona client and server tools directly within Docker Desktop.

The Docker Extension allows you to create, open, list, and delete [Workspaces](/docs/usage/workspaces).

View the Daytona Docker Extension in the [Docker Desktop Extensions Marketplace](https://open.docker.com/extensions/marketplace?extensionId=daytonaio/docker-extension&tag=0.44.0) or [GitHub repository](https://open.docker.com/extensions/marketplace?extensionId=daytonaio/docker-extension&tag=0.44.0).

## Prerequisites

- [Docker Desktop](https://www.docker.com/products/docker-desktop) installed on your machine.

## Installation

{/* Install the Daytona Docker Extension from the [Docker Desktop Extensions Marketplace](https://open.docker.com/extensions/marketplace?extensionId=daytonaio/docker-extension&tag=0.44.0).

### Manual */}

1. Run the following command to install the Daytona Docker Extension

```sh
docker extension install daytonaio/docker-extension
```

:::note
Allow non-marketplace extensions in the Docker desktop settings to install the Daytona Docker extension.
:::

Wait while Daytona Docker Extension sets up your Workspace. It handles all the initialization and configuration of your environment.

## Create a Workspace

Create a new Workspace using the Daytona Docker Extension within the Docker Desktop.

1. Click **`Create Workspace`** to start creating a new Workspace.
2. Select the Workspace resource. You can choose from the following options:

- Browse your Git repositories.
- Select a predefined sample.
- Find with URL.

3. Select the **`IDE`** from the dropdown list.
4. Select the **`Target`** from the dropdown list.
5. Click **`Next`** to proceed.

```text
Opening the project <project> from workspace <workspace> in <IDE>

Setting up IDE customizations...
Waiting for code server to install...
Installing extensions...
Setting up IDE settings...
...
```

Daytona Docker Extension will create a new Workspace with the selected settings. You can now [open the Workspace](#open-an-existing-workspace) and start working on your project.

## Open an Existing Workspace

Daytona Docker Extension provides an option to open an existing Workspace in your IDE. This enables you to quickly access and work on your projects in your preferred development environment. With Daytona Docker Extension, you can effortlessly switch between different Workspaces and maintain an efficient workflow.

1. Click the IDE button of the Workspace you want to open.

    This will automatically launch your Workspace in the selected IDE.

## Manage a Workspace

Daytona Docker Extension provides an option to access and manage your Workspace, providing a detailed overview of the Workspace configuration.

Once a Workspace is created, you will be presented with the following options and information:

- **Name**

    The name of the Workspace, and the GitHub repository it is associated with.

- **Status**

    The current status of the Workspace, such as `Running` or `Stopped`.

- **Target**

    The target environment for the Workspace.

- **IDE**

    The IDE used to open the Workspace.

- [**Delete**](#delete-a-workspace)

    Click the bin icon to delete the Workspace from the Daytona Docker Extension.

## Delete a Workspace

Daytona Docker Extension provides an option to delete one or more Workspaces, helping you manage your development environments by removing those that are no longer needed.

1. Click the bin icon to delete your Workspace.

---
title: Builders
description: A reference detailing how to use Dev Containers and custom images as the base for your project.
sidebar:
  label: Builders
---


<Label>
  Distribution: **Open Source**
</Label>


Builders are responsible for creating a container image with the necessary tools and configurations for your [Project](/docs/usage/projects).
Daytona provides control over how the resulting Project environment is created, allowing you to choose your preferred method to build the Project image.

You can choose between the following Builders while [creating a Workspace](/docs/usage/workspaces#create-a-workspace):

- [**Automatic**](#automatic)

   Daytona builds the Project image after auto-detecting the most appropriate Builder.

- [**Dev Container**](#dev-container)

   Daytona builds the Project image according to the Dev Container configuration located in the project.

- [**Custom Image**](#custom-image)

   Daytona builds the Project image using an image you specify.

- [**None**](#none)

   Daytona creates the Project using the default base image.

## Automatic

Daytona can auto-detect the most appropriate Builder for your Project. Daytona uses the following logic to determine which Builder to use:

1. Check if a Dev Container configuration is present in **`.devcontainer.json`** or **`.devcontainer/devcontainer.json`**, relative to the repository root.
2. If present, use the [Dev Container](#dev-container) Builder. If not present, use the [None](#none) Builder.

To use the Automatic Builder, set the `--builder` flag value to `auto` during the [Workspace creation](/docs/usage/workspaces#create-a-workspace). This flag only applies when creating Workspaces with a single Project.

```shell
daytona create <REPO_URL> --builder=auto
```

## Dev Container

Development Containers (Dev Containers) provide a consistent and fully featured development environments for your [Projects](/docs/usage/projects). A Dev Container defines all the necessary tools, runtime, and environment configurations required to build and run your Projects.

The Dev Container specification is designed to define a development environment that can be replicated across different platforms and CI/CD systems. The specification is defined within a `devcontainer.json` file in the project repository.

The `devcontainer.json` file is a JSON file that consists of components that define the development environment. The file includes objects with properties containing metadata and settings required to configurate a development container. View the [dev container specification](https://containers.dev/implementors/json_reference/) for more information.

Use [devcontainer.ai](https://devcontainer.ai/) to generate a `devcontainer.json` file for your Project.

Example `devcontainer.json` file:

```sh
{
    "name": "Example Python & PostgreSQL Dev Container",
    "build": {
        "dockerfile": "Dockerfile",
        "args": {
            "VARIANT": "3.8",
            "INSTALL_NODE": "false"
        }
    },
    "settings": {
        "terminal.integrated.shell.linux": "/bin/bash"
    },
    "extensions": [
        "ms-python.python",
        "ms-azuretools.vscode-docker"
    ],
    "postCreateCommand": "pip install -r requirements.txt",
    "remoteUser": "vscode"
}
```

- `name`: The name of the development container.
- `build`: The build configuration for the development container.
- `settings`: The settings for the development container.
- `extensions`: The extensions to install in the development container.
- `postCreateCommand`: The command to run after creating the development container.
- `remoteUser`: The user to execute commands as during the image build process.

Daytona provides the option to build the Project image using the Dev Container standard. Use the following option available when using the Dev Container Builder:

- **Devcontainer file path**

   The path where the Dev Container configuration is located, relative to the repository root.
   The default value is `.devcontainer/devcontainer.json`.

To use the Dev Container Builder, set the `--devcontainer-path` flag to the Dev Container configuration path within the repository during the [Workspace creation](/docs/usage/workspaces#create-a-workspace). This flag only applies when creating Workspaces with a single Project.

```shell showLineNumbers
daytona create <REPO_URL> --devcontainer-path=.devcontainer/devcontainer.json
```

:::note
For more information on the Dev Container standard, refer to the official documentation at [containers.dev](https://containers.dev/).
:::

## Custom Image

You can build the Project image by specifying a custom base container.
The following options are accepted when using this Builder:

- **Custom container image**

   The name of the base container image for the Project.

- **Container user**

   The user to execute commands as during the image build process.

- **Environment variables**

   A list of environment variables in the format `KEY=VALUE`.

To use the Custom Image Builder, set both `--custom-image` and `--custom-image-user` flags while [creating a Workspace](/docs/usage/workspaces#create-a-workspace). These flags only apply when creating Workspaces with a single Project.

```shell
daytona create <REPO_URL> --custom-image=daytona-workspace:latest --custom-image-user=daytona
```

## None

Daytona can build a Project using the default base image.

Unless otherwise configured using `daytona server configure`, the default base image is set to `daytonaio/workspace-project`.

## Custom Build Registry

You can set a custom build registry for images built by a Daytona Builder.
After an image is built, it will be uploaded to the configured container registry to speed up future Workspace creation for the same Project.

**Prerequisite**

- An account on an accessible container registry with permission to push/pull images.

1. Execute the following command to configure the custom build registry:

```shell
daytona container-registry set
```

2. Set the required options:

- **Server URL**

   The full URL to your custom container registry.

- **Username**

   The username Daytona should use to log in to the container registry.

- **Password**

   The password for your container registry account.

3. Press <Keyboard shortcuts="Enter" /> to set the custom build registry.
4. Execute the following command to configure the server:

```shell
daytona server configure
```

5. Press <Keyboard shortcuts="Enter" /> until the "Builder Registry" section is highlighted.

```text
Builder Registry
To add options, add a container registry with 'daytona cr set'
> Local registry managed by Daytona
```

6. Select the custom registry configured previously using <Keyboard shortcuts="↑" /> / <Keyboard shortcuts="↓" /> arrow keys.
7. Press <Keyboard shortcuts="Enter" /> until the command exits to save the configuration.

---
title: IDEs
description: Connect to your Workspace using your default IDE.
sidebar:
  label: IDEs
---


<Label>
  Distribution: **Open Source**, **Cloud**, **Self-Managed**
</Label>

Daytona allows you to connect to your [Workspace](/docs/usage/workspaces#open-an-existing-workspace) using your default IDE.

Out of the box, Daytona can be configured to open your Workspace in the following IDEs:

- **Visual Studio Code (VSCode)**

  - [Desktop (Linux, macOS, Windows)](#vs-code)
  - [Browser](#vs-code-browser)

- **JetBrains IDEs**
  - [CLion](#jetbrains-clion)
  - [GoLand](#jetbrains-goland)
  - [IntelliJ IDEA Ultimate](#jetbrains-intellij-idea-ultimate)
  - [PhpStorm](#jetbrains-phpstorm)
  - [PyCharm Professional](#jetbrains-pycharm-professional)
  - [Rider](#jetbrains-rider)
  - [RubyMine](#jetbrains-rubymine)
  - [WebStorm](#jetbrains-webstorm)
  - [Fleet](#jetbrains-fleet)

- [Jupyter](#jupyter)

- [Zed](#zed)

- [Cursor](#cursor)

- [Terminal SSH](#terminal-ssh)

## Set the Default IDE

You can set the default IDE used by Daytona.

1. Run the following command to set the default IDE:

```shell
daytona ide
```

Upon running this command, Daytona will display a list of available IDEs, allowing you to select your default choice.

```text
Choose Your Default IDE

VS Code
VS Code - Browser
Terminal SSH
CLion
GoLand
...
```

2. Select your preferred IDE from the list presented. Upon selecting, Daytona will set it as the default IDE and display a confirmation message.

```text
Default IDE:  VS Code
```

You can now use the `daytona code` command to automatically open the default IDE already connected to your Workspace.

## VS Code

Daytona allows you to connect to your Workspace using Visual Studio Code (VSCode) IDE.

1. Run the following command to set your default IDE to VS Code:

```shell
daytona ide
```

Upon running this command, Daytona will display a list of available IDEs, allowing you to select `VS Code` as your default choice.

```text
Choose Your Default IDE

| VS Code
```

2. Select `VS Code` from the list presented. Upon selecting, Daytona will set it as the default IDE and display a confirmation message.

```text
Default IDE:  VS Code
```

You can now use the `daytona code` command to automatically open the default IDE already connected to your Workspace.

## VS Code Browser

Daytona allows you to connect to your Workspace using Visual Studio Code (VSCode) Browser IDE.

1. Run the following command to set your default IDE to VSCode Browser:

```shell
daytona ide
```

Upon running this command, Daytona will display a list of available IDEs, allowing you to select `VS Code - Browser` as your default choice.

```text
Choose Your Default IDE

| VS Code - Browser
```

2. Select **`VS Code - Browser`** from the list presented. Upon selecting, Daytona will set it as the default IDE and display a confirmation message.

```text
Default IDE:  VS Code - Browser
```

You can now use the `daytona code` command to automatically open the VS Code - Browser IDE already connected to your Workspace.

:::note
When using the `daytona code` command with `VS Code - Browser` as your default IDE, Daytona will install OpenVSCode Server inside your project, forward the appropriate port to your local machine, and open your default browser automatically.
:::

## JetBrains CLion

Daytona allows you to connect to your Workspace using JetBrains CLion IDE.

1. Run the following command to set your default IDE to JetBrains CLion:

```shell
daytona ide
```

Upon running this command, Daytona will display a list of available IDEs, allowing you to select `CLion` as your default choice.

```text
Choose Your Default IDE

| CLion
```

2. Select **`CLion`** from the list presented. Upon selecting, Daytona will set it as the default IDE and display a confirmation message.

```text
Default IDE:  CLion
```

You can now use the `daytona code` command to automatically open the JetBrains CLion IDE already connected to your Workspace.

## JetBrains GoLand

Daytona allows you to connect to your Workspace using JetBrains GoLand IDE.

1. Run the following command to set your default IDE to JetBrains GoLand:

```shell
daytona ide
```

Upon running this command, Daytona will display a list of available IDEs, allowing you to select `GoLand` as your default choice.

```text
Choose Your Default IDE

| GoLand
```

2. Select **`GoLand`** from the list presented. Upon selecting, Daytona will set it as the default IDE and display a confirmation message.

```text
Default IDE:  GoLand
```

You can now use the `daytona code` command to automatically open the JetBrains GoLand IDE already connected to your Workspace.

## JetBrains IntelliJ IDEA Ultimate

Daytona allows you to connect to your Workspace using JetBrains IntelliJ IDEA Ultimate IDE.

1. Run the following command to set your default IDE to JetBrains IntelliJ IDEA Ultimate:

```shell
daytona ide
```

Upon running this command, Daytona will display a list of available IDEs, allowing you to select `IntelliJ IDEA Ultimate` as your default choice.

```text
Choose Your Default IDE

| IntelliJ IDEA Ultimate
```

2. Select **`IntelliJ IDEA Ultimate`** from the list presented. Upon selecting, Daytona will set it as the default IDE and display a confirmation message.

```text
Default IDE: IntelliJ IDEA Ultimate
```

You can now use the `daytona code` command to automatically open the JetBrains IntelliJ IDEA Ultimate IDE already connected to your Workspace.

## JetBrains PhpStorm

Daytona allows you to connect to your Workspace using JetBrains PhpStorm IDE.

1. Run the following command to set your default IDE to JetBrains PhpStorm:

```shell
daytona ide
```

Upon running this command, Daytona will display a list of available IDEs, allowing you to select `PhpStorm` as your default choice.

```text
Choose Your Default IDE

| PhpStorm
```

2. Select **`PhpStorm`** from the list presented. Upon selecting, Daytona will set it as the default IDE and display a confirmation message.

```text
Default IDE: PhpStorm
```

You can now use the `daytona code` command to automatically open the JetBrains PhpStorm IDE already connected to your Workspace.

## JetBrains PyCharm Professional

Daytona allows you to connect to your Workspace using JetBrains PyCharm Professional IDE.

1. Run the following command to set your default IDE to JetBrains PyCharm Professional:

```shell
daytona ide
```

Upon running this command, Daytona will display a list of available IDEs, allowing you to select `PyCharm Professional` as your default choice.

```text
Choose Your Default IDE

| PyCharm Professional
```

2. Select **`PyCharm Professional`** from the list presented. Upon selecting, Daytona will set it as the default IDE and display a confirmation message.

```text
Default IDE: PyCharm Professional
```

You can now use the `daytona code` command to automatically open the JetBrains PyCharm Professional IDE already connected to your Workspace.

## JetBrains Rider

Daytona allows you to connect to your Workspace using JetBrains Rider IDE.

1. Run the following command to set your default IDE to JetBrains Rider:

```shell
daytona ide
```

Upon running this command, Daytona will display a list of available IDEs, allowing you to select `Rider` as your default choice.

```text
Choose Your Default IDE

| Rider
```

2. Select **`Rider`** from the list presented. Upon selecting, Daytona will set it as the default IDE and display a confirmation message.

```text
Default IDE: Rider
```

You can now use the `daytona code` command to automatically open the JetBrains Rider IDE already connected to your Workspace.

## JetBrains RubyMine

Daytona allows you to connect to your Workspace using JetBrains RubyMine IDE.

1. Run the following command to set your default IDE to JetBrains RubyMine:

```shell
daytona ide
```

Upon running this command, Daytona will display a list of available IDEs, allowing you to select `RubyMine` as your default choice.

```text
Choose Your Default IDE

| RubyMine
```

2. Select **`RubyMine`** from the list presented. Upon selecting, Daytona will set it as the default IDE and display a confirmation message.

```text
Default IDE: RubyMine
```

You can now use the `daytona code` command to automatically open the JetBrains RubyMine IDE already connected to your Workspace.

## JetBrains WebStorm

Daytona allows you to connect to your Workspace using JetBrains WebStorm IDE.

1. Run the following command to set your default IDE to JetBrains WebStorm:

```shell
daytona ide
```

Upon running this command, Daytona will display a list of available IDEs, allowing you to select `WebStorm` as your default choice.

```text
Choose Your Default IDE

| WebStorm
```

2. Select **`WebStorm`** from the list presented. Upon selecting, Daytona will set it as the default IDE and display a confirmation message.

```text
Default IDE: WebStorm
```

You can now use the `daytona code` command to automatically open the JetBrains WebStorm IDE already connected to your Workspace.

## JetBrains Fleet

Daytona allows you to connect to your Workspace using JetBrains Fleet IDE.

1. Run the following command to set your default IDE to JetBrains Fleet:

```shell
daytona ide
```

Upon running this command, Daytona will display a list of available IDEs, allowing you to select `Fleet` as your default choice.

```text
Choose Your Default IDE

| Fleet
```

2. Select **`Fleet`** from the list presented. Upon selecting, Daytona will set it as the default IDE and display a confirmation message.

```text
Default IDE: Fleet
```

You can now use the `daytona code` command to automatically open the JetBrains WebStorm IDE already connected to your Workspace by following the steps below:

- Install [JetBrains Toolbox](https://www.jetbrains.com/toolbox-app/).

- Install the JetBrains Fleet IDE using JetBrains Toolbox.

- Ensure the JetBrains Fleet IDE is in your `PATH`, and name your shell script `fleet`. For more information, visit the official [Launch JetBrains Fleet from CLI](https://www.jetbrains.com/help/fleet/launch-from-cli.html) guide.

## Jupyter

Daytona allows you to connect to your Workspace using Jupyter IDE.

1. Run the following command to set your default IDE to Jupyter:

Upon running this command, Daytona will display a list of available IDEs, allowing you to select `Jupyter` as your default choice.

```text
Choose Your Default IDE

| Jupyter
```

2. Select **`Jupyter`** from the list presented. Upon selecting, Daytona will set it as the default IDE and display a confirmation message.

```text
Default IDE: Jupyter
```

You can now use the `daytona code` command to automatically open the Jupyter IDE already connected to your Workspace.

## Zed

Daytona allows you to connect to your Workspace using Zed.

1. Run the following command to set your default IDE to Zed:

Upon running this command, Daytona will display a list of available IDEs, allowing you to select `Zed` as your default choice.

```text
Choose Your Default IDE

| Zed
```

2. Select **`Zed`** from the list presented. Upon selecting, Daytona will set it as the default IDE and display a confirmation message.

```text
Default IDE: Zed
```

You can now use the `daytona code` command to automatically open the Zed IDE already connected to your Workspace.

## Cursor

Daytona allows you to connect to your Workspace using Cursor IDE.

:::note
After installing the [Cursor](https://www.cursor.com/) IDE, run the `Install 'cursor' command` from the command palette.
:::

<br />

1. Run the following command to set your default IDE to Cursor:

Upon running this command, Daytona will display a list of available IDEs, allowing you to select `Cursor` as your default choice.

```text
Choose Your Default IDE
| Cursor
```

2. Select **`Cursor`** from the list presented. Upon selecting, Daytona will set it as the default IDE and display a confirmation message.

```text
Default IDE: Cursor
```

You can now use the `daytona code` command to automatically open the Cursor IDE already connected to your Workspace.

## Terminal SSH

Daytona allows you to connect to your Workspace through SSH.

1. Run the following command to set your default IDE to Terminal SSH:

```shell
daytona ide
```

Upon running this command, Daytona will display a list of available IDEs, allowing you to select `Terminal SSH` as your default choice.

```text
Choose Your Default IDE

| Terminal SSH
```

2. Select **`Terminal SSH`** from the list presented. Upon selecting, Daytona will set it as the default IDE and display a confirmation message.

```text
Default IDE: Terminal SSH
```

You can now use the `daytona code` command to automatically start an SSH session already connected to your Workspace.

---
title: Prebuilds
description: Learn how to manage and reuse Prebuilds across Workspaces.
sidebar:
  label: Prebuilds
---


<Label>
  Distribution: **Open Source**
</Label>

Prebuilds are designed to accelerate development by pre-building your Workspace. When you start a Workspace, the prebuilt environment is used, ensuring that the Workspace is initiated almost instantly.

Prebuilds achieve this by setting up a [project configuration](/docs/usage/projects#project-configuration) that monitors changes in the connected Git Provider's repository.

Prebuilds work by registering a listener for webhook events from the Git Provider. A public API endpoint is provided, which the Git Provider uses to send these requests.

:::note
Daytona currently supports GitHub, GitLab, and GitLab Self-Managed as Git Providers for Prebuilds.
:::

## Add a Prebuild

1. Run the following command to add a new Prebuild:

```shell
daytona prebuilds add
```

Upon running the command, Daytona will prompt you to select a project configuration you plan to work on. You can then decide on a commit interval (e.g. `5`, _every 5 commits_) after which a build should be triggered, any specific trigger files whose changes should immediately start the build process, and build retention (the maximum number of builds to store at a time).

```text
Select a Project Config To Prebuild
1 item
MyConfig
https://github.com/username/myproject.git
```

```text
Commit interval
Leave blank to ignore push events
>
```

```text
Trigger Files
Enter full paths for files whose changes you want to explicitly trigger a prebuild. Use new lines for multiple entries.
```

```text
Retention
Maximum number of resulting builds stored at a time
>
```

Subsequent `daytona create` calls will automatically detect the most recent existing build and use it to create the project.

## Use a Prebuild

Once you added a Prebuild, it becomes active immediately based on the [project configuration](/docs/usage/projects#project-configuration) you provided. The Prebuild will automatically run whenever the specified conditions are met, such as when the defined number of commits is reached.

For instance, if you specified a commit interval of `5`, the Prebuild will run after every `5` commits to the repository. Populate the **Trigger files** field with files whose changes you want to immediately trigger a Prebuild, without having to wait for the commit interval. Use the **Retention** field to define how many successful builds you want Daytona to remember (defaults to `3`).

As soon as you add a Prebuild, a build process will automatically start in the background unless you have configured it otherwise. The initial build process may take some time to complete, but subsequent builds will be significantly faster. You can view the initial build's progress by running `daytona builds list`.

Once the build process is complete, run the following command to create a Workspace using the configured project configuration:

```shell
daytona create [PROJECT_CONFIG_NAME]
```

Upon running this command, Daytona will detect the most recent Prebuild associated with the selected project configuration. The Workspace will then use this Prebuild, significantly speeding up the setup process by utilizing the cached environment

During the Workspace creation process, if the initial Prebuild has finished, the setup will be almost instantaneous. Otherwise, a new build will be triggered, potentially slowing down the Workspace creation.

## List Prebuilds

Daytona allows you to list all Prebuilds, providing you with an overview of the properties stored within each Prebuild configuration.

1. Run the following command to list all Prebuilds:

```shell
daytona prebuilds list
```

Upon running this command, Daytona will display a list of your Prebuilds. You will be able to view the project configuration, the branch it is linked to, the commit interval, the trigger files, and the build retention.

```text
Project Config   Branch  Commit Interval  Trigger files  Build Retention
────────────────────────────────────────────────────────────────────────
MyConfig         main    5                None           3
```

## Prebuilds Information

Daytona allows you to view detailed information of a Prebuild, providing you with an overview of the properties stored within it.

1. Run the following command to view the details of a Prebuild:

```shell
daytona prebuilds info
```

2. Select the Prebuild you want to view.

```text
Select a Prebuild To View
1 item
MyConfig (main)                                                              
abcd1234efg (every 5 commits)
```

Upon selecting the Prebuild, Daytona will display the details of the selected Prebuild. You will be able to view the Prebuild ID, the project configuration, the branch it is linked to, the commit interval, the trigger files, and the build retention.

```text
Prebuild Configuration Info                                                                   
                                                                                             
ID                   abcd1234efg
Project config       MyConfig
Branch               main
Commit interval      5
Build retention      3
```

## Update Prebuilds

Daytona allows you to update a Prebuild, helping you manage and modify the Prebuild configuration.

1. Run the following command to update a Prebuild:

```shell
daytona prebuilds update
```

2. Select the Prebuild you want to update.

```text
Select a Prebuild To Update
1 item
MyConfig (main)                                                              
abcd1234efg (every 5 commits)
```

Upon selecting the Prebuild, Daytona will prompt you to update the Prebuild commit interval, trigger files, and build retention.

```text
Commit interval
>
```

```text
Trigger Files
Enter full paths for files whose changes you want to explicitly trigger a prebuild. Use new lines for multiple entries.
```

```text
Retention
Maximum number of resulting builds stored at a time
>
```

Upon updating the Prebuild configuration, Daytona will display a success message.

```text
Prebuild updated successfully
```

## Delete Prebuilds

Daytona allows you to delete Prebuilds, helping you manage and remove those that are no longer needed.

1. Run the following command to delete a Prebuild:

```shell
daytona prebuilds delete
```

2. Select the Prebuild you want to delete.

```text
Select a Prebuild To Delete
1 item
MyConfig (main)
abcd1234efg (every 5 commits)
```

```text
Prebuild deleted successfully
```

---
title: Projects
description: Learn how to manage and reuse Project Configurations across multiple Workspaces.
sidebar:
  label: Projects
---


<Label>
  Distribution: **Open Source**
</Label>

Projects represent a comprehensive set of settings and resources that define how your code is managed, built, and deployed within a Workspace. Each Project is associated with a specific repository and contains the necessary configurations to ensure a consistent development environment.

## Project Configuration

A project configuration is designed to simplify the management of development environments, allowing you to predefine settings that can be easily applied to any new or existing Workspace.

A project configuration contains all necessary properties to define and manage projects within a Workspace. It stores information such as the repository URL, build configuration, and environment variables. This allows for easy reuse of previously set configurations, ensuring a consistent and reproducible setup across multiple Workspaces.

A project configuration encapsulates all the essential elements for setting up a project, including:

- **Repository URL**

   The URL of the Git repository associated with the Project.

- **Build Configuration**

  - [Automatic](/docs/usage/builders#automatic) auto-detects the most appropriate Builder for your project.
  - [Devcontainer](/docs/usage/builders#dev-container) utilizes a predefined development container specified by a `devcontainer.json` file.
  - [Custom image](/docs/usage/builders#custom-image) builds the Project image by specifying a custom base container.
  - [None](/docs/usage/builders#none) builds a Project by using the default base image (`daytonaio/workspace-project`).

- **Environment Variables**

   Environment variables are specified in the `KEY=VALUE` format. These variables are essential for the Project's build and runtime environments. You can set the variables directly or pass them from the machine's environment during execution.

- **Project Configuration name**

   A unique identifier for the Project Configuration, which distinguishes it from other configurations within the system.

With the `daytona project-config` command, you can add, view, update, list, set as default, or delete Project Configurations, giving you full control over the configuration and reuse of your Project setups across different Workspaces.

## Add a Project Configuration

Daytona allows you to add a new Project Configuration, enabling you to store and reuse project properties across multiple Workspaces.

1. Run the following command to add a new Project Configuration:

```shell
daytona project-config add
```

2. Enter the repository URL of the project you want to configure.

```text
Git repository
>
```

3. Select the build configuration for the project.

```text
Choose a build configuration
Automatic
Devcontainer
Custom image
None
```

4. Enter the environment variables for the project in the `KEY=VALUE` format.

```text
Environment Variables
Enter environment variables in the format KEY=VALUE
To pass machine env variables at runtime, use $VALUE
```

5. Enter a name for the Project Configuration.

```text
Project config name
>
```

   Upon completion, Daytona will save the Project Configuration, allowing you to reuse it across multiple Workspaces.

## Project Configuration Information

Daytona allows you to view detailed information of a Project Configuration, providing you with an overview of the properties stored within it.

1. Run the following command to view the details of a Project Configuration:

```shell
daytona project-config info
```

Upon running this command, Daytona will display a list of your Project Configurations

2. Select the Project Configuration you want to view.

```text
Select a Project Config To View
1 item

┃  MyProjectConfig
┃  https://github.com/username/MyProject
```

   Upon selecting the Project Configuration, Daytona will display the details of the selected configuration. You will be able to view the Project Configuration name, the repository URL it is linked to, the build configuration, and the Devcontainer path.

```text
Project Config Info

Name                    MyProjectConfig
Repository              https://github.com/username/MyProject
Build                   Devcontainer
Devcontainer path       .devcontainer/devcontainer.json
```

## List Project Configuration

Daytona allows you to list all Project Configurations, providing you with an overview of the properties stored within each configuration.

1. Run the following command to list all Project Configurations:

```shell
daytona project-config list
```

Upon running this command, Daytona will display a list of your Project Configurations. You will be able to view the Project Configuration name, the repository URL it is connected to, the build configuration, and if it is set as a default configuration.

```text
Name                Repository             Build             Default
─────────────────────────────────────────────────────────────────────
MyProjectConfig     daytonaio/daytona      Devcontainer      Yes
```

## Set Default Project Configuration

Daytona allows you to set a default Project Configuration, enabling you to define a configuration that will be used by default when creating new Workspaces.

1. Run the following command to set a default Project Configuration:

```shell
daytona project-config set-default
```

2. Select the Project Configuration you want to set as the default.

```text
Select a Project Config To Set As Default
1 item

┃  MyProjectConfig
┃  https://github.com/username/MyProject
```

   Upon selecting the default Project Configuration, Daytona will set it as the default configuration for new Workspaces.

```text
Project config 'MyProjectConfig' set as default
```

## Update Project Configuration

Daytona allows you to update an existing Project Configuration, enabling you to modify the properties stored within it.

1. Run the following command to update a Project Configuration:

```shell
daytona project-config update
```

2. Select the Project Configuration you want to update.

```text
Select a Project Config To Update
1 item

┃  MyProjectConfig
┃  https://github.com/username/MyProject
```

3. Update the properties of the Project Configuration.

```text
Choose a build configuration
Automatic
Devcontainer
Custom image
None
```

```text
Environment Variables
Enter environment variables in the format KEY=VALUE
To pass machine env variables at runtime, use $VALUE
```

Upon completion, Daytona will save the updated Project Configuration, allowing you to reuse it across Workspaces.

```text
Project config updated successfully
```

## Delete Project Configuration

Daytona allows you to delete an existing Project Configuration, enabling you to remove properties that are no longer needed.

1. Run the following command to delete a Project Configuration:

```shell
daytona project-config delete
```

2. Select the Project Configuration you want to delete.

```text
Select a Project Config To Delete
1 item

┃  MyProjectConfig
┃  https://github.com/username/MyProject
```

```text
Project config deleted successfully
```

---
title: Server
description: A reference for the Daytona server.
sidebar:
  label: Server 
---


<Label>
  Distribution: **Open Source**
</Label>

The Daytona Server is a daemon that runs on your machine and handles [Workspaces](/docs/usage/workspaces) related actions.
It provides capabilities for [starting](#start-the-server), [configuring](#configure-the-server), and [stopping](#stop-the-server) server operations.
The primary method of interacting with the server is through the Daytona CLI. Users can also interact with the Daytona Server using its HTTP interface.

## Start the Server

Run the following command to start the Daytona Server:

```shell
daytona server start
```

Upon running this command, Daytona will start the The Daytona Server daemon.

```text
Starting the Daytona Server daemon...
```

## Configure the Server

The Daytona Server configuration is located in different directories depending on your operating system.

- On macOS, the configuration file is located at:

    `~/Library/Application\ Support/daytona/server/config.json`

- On Linux, the configuration file is located at:

    `~/.config/daytona/server/config.json`

- On Windows, the configuration file is located at:

    `C:\Users\YOUR_USERNAME\AppData\Roaming\daytona\server\config.json`

The Daytona Server configuration can be viewed by using the following command across all operating systems:

```shell
daytona server config
```

The Daytona Server configuration contains the following properties:

- **Server ID**

    A unique identifier for the Daytona server instance.

    Example: `12a34bc5-d67e-890f-1gh2-34i5jk6l7m89`

- **API URL**

    The URL endpoint for the Daytona API.

    Example: `https://api-12a34bc5-d67e-890f-1gh2-34i5jk6l7m89.try-eu.daytona.app`

    The API URL property cannot be manually edited, but you can use it to connect to Daytona with other clients.

- **API Port**

    The port number on which the Daytona API is accessible.

    Example: `3986`

    If you have something running on port 3986, you can change it to a port that you have available.

- **Default Project Image**

    The default Docker image used for projects.

    Example: `daytonaio/workspace-project:latest`

    The Default Project Image property can be manually edited to use a different default project image.

- **Default Project User**

    The default user for projects.

    Example: `daytona`

    The Default Project User property can be manually edited to use a different default project user.

- **FRPS Domain**

    The domain used by the FRP (Fast Reverse Proxy) server.

    Example: `try-eu.daytona.app`

    The FRPS Domain property can be manually edited to use a different FRP domain.

- **FRPS Port**

    The port used by the FRP (Fast Reverse Proxy) server.

    Example: `7000`

    The FRPS Port property can be manually edited to use a different FRP port.

- **FRPS Protocol**

    The protocol used by the FRP (Fast Reverse Proxy) server.

    Example: `https`

    The FRPS Protocol property can be manually edited to use a different FRP protocol.

- **Headscale Port**

    The port number for the Headscale service.

    Example: `3987`

    The Headscale Port property can be manually edited to use a different Headscale port.

- **Binaries Path**

    The directory path where server binaries are stored.

    Example: `/Users/Library/Application Support/daytona/server/binaries`

    The Binaries Path directory will be created if it does not exist, and the property can be manually edited to use a different binaries path.

- **Log File Path**

    The directory path where server logs are stored.

    Example: `/Users/Library/Application Support/daytona/server/daytona.log`

    The Log File Path file will be created if it does not exist, and the property can be manually edited to use a different log file path.

- **Builder Image**

    The Docker image used by the local builder.

    Example: `daytonaio/workspace-project:latest`

    The Builder Image property can be manually edited to use a different builder image.

- **Local Builder Registry Port**

    The port number for the local builder registry.

    Example: `3988`

    The Local Builder Registry Port property is only displayed if the Builder Registry is set to local. It can be manually edited to use a different local builder registry port.

- **Local Builder Registry Image**

    The registry image used by the local builder registry.

    Example: `registry:2.3.8`

    The Local Builder Registry Image property is only displayed if the Builder Registry is set to local. It can be manually edited to use a different local builder registry image.

- **Build Image Namespace**

    The namespace for build images. This is used to organize and manage images within a specific scope.

    Example: `daytona`

    The Build Image Namespace property can be manually edited to use a different build image namespace.

- **Providers Dir**

    The directory path where provider configuration is stored.

    Example: `/Users/Library/Application Support/daytona/providers`

- **Registry URL**

    The URL for the Daytona registry.

    Example: `https://download.daytona.io/daytona`

- **Server Download URL**

    The URL for downloading the Daytona server.

    Example: `https://download.daytona.io/daytona/install.sh`

The Daytona Server configuration can be manually edited by using the following command:

```shell
daytona server configure
```

```text  
Providers Directory
Directory will be created if it does not exist
> /Users/Library/Application Support/daytona/providers

Providers Directory
> /Users/Library/Application Support/daytona/providers

Registry URL
> https://download.daytona.io/daytona

Server Download URL
> https://download.daytona.io/daytona/install.sh

Default Project Image
> daytonaio/workspace-project:latest

Default Project User
> daytona

Builder Image
Image dependencies: docker, @devcontainers/cli (node package)
> daytonaio/workspace-project:latest

Builder Registry
To add options, add a container registry with 'daytona cr set'
> Local registry managed by Daytona

Build Image Namespace
Namespace to be used when tagging and pushing build images
>

Local Builder Registry Port
> 3988

Local Builder Registry Image
> registry:0.0.0

API Port
> 3986

Headscale Port
> 3987

Binaries Path
Directory will be created if it does not exist
> /Users/Library/Application Support/daytona/server/binaries

Log File Path
File will be created if it does not exist
> /Users/Library/Application Support/daytona/server/daytona.log

Frps Domain
> try-eu.daytona.app

Frps Port
> 7000

Frps Protocol
> https
```

Upon successful configuration, Daytona will validate the settings and ensure all specified directories and files are correctly set up, preparing the server for optimal operation.

```text
Server configuration updated. You need to restart the server for the changes to take effect.
```

Use the `daytona server restart` command to restart the server for the changes to take effect.

## Restart the Server

Run the following command to restart the Daytona Server:

```shell
daytona server restart
```

Upon running this command, Daytona will automatically stop and start The Daytona Server daemon.

```text
Stopping the Daytona Server daemon...
Starting the Daytona Server daemon...
Daytona Server daemon restarted successfully
```

## Stop the Server

Run the following command to stop the Daytona Server:

```shell
daytona server stop
```

Upon running this command, Daytona will stop the Daytona Server daemon.

```text
Stopping the Daytona Server daemon...
```

---
title: Workspaces
description: Learn how to create and manage Workspaces using Daytona.
sidebar:
  label: Workspaces
---


<Label>
  Distribution: **Open Source**, **Cloud**, **Self-Managed**
</Label>

Workspaces serve as isolated environments containing your project’s codebase, dependencies, packages, and configuration, providing a consistent and reproducible setup for development, testing, and deployment.

They ensure that changes in one project do not inadvertently affect another, promoting a more stable and reliable workflow. This is particularly beneficial in collaborative settings, as it ensures that all team members are working with the same configuration, reducing the likelihood of environment-related issues.

## Create a Workspace

Creating a Workspace in Daytona is a straightforward process that ensures you have a dedicated development environment for your projects.

Daytona provides two primary methods for creating a Workspace:

- [**From a Git Repository**](#from-a-git-repository)
- [**From an Arbitrary Git URL**](#from-an-arbitrary-git-url)
- [**With Multiple Projects**](#create-a-workspace-with-multiple-projects)

### From a Git Repository

Creating a Workspace from a Git repository sets up a new development environment using a [connected Git Provider](/docs/configuration/git-providers) or a custom Git repository URL.

1. Run the following command to create a Workspace from a Git repository:

```shell
daytona create
```

<Aside type="tip">
Skip automatically opening the Workspace in an [IDE](/docs/usage/ide) by using the `--no-ide` flag.

```shell
daytona create --no-ide
```

</Aside>

<br />

2. Select one of the three provided options:

- **Select from a List of Repositories**

   If you [connected a Git Provider](/docs/configuration/git-providers), you will be presented with a list of your repositories from which you can select to connect with your Workspace.

- **Enter a Custom Repository URL**

   Alternatively, select the option to enter a custom repository URL manually if the repository is not listed under your Git Provider account or is from an external source.

- **Create from Sample**

   If you do not have a Git repository ready, you can create a Workspace from a Sample project provided by Daytona. This option sets up a new development environment using quick-start templates.

```text
Choose a Git Provider
3 items
===
GitHub
Enter a custom repository URL
Create from Sample
```

3. Select the Git repository from the list, enter the URL of the Git repository you want to link with your Workspace, or choose to create a Workspace from a sample project.

4. Enter a name for your Workspace.

```text
Workspace name
>
```

<Aside type="tip">
   Press `F10` to configure advanced settings for your Workspace,
   including setting the [Builder](/docs/usage/builders).
</Aside>

<br />

5. Select a Target to deploy your Workspace to. Selecting a Target will prompt you to input the [Target configuration](/docs/configuration/targets). The configurations vary based on the selected Target.

```text
Choose a Target
6 items
===
local
docker-provider

Add a Docker Provider Target
docker-provider (needs installing)

Add a Digital Ocean Provider Target
digitalocean-provider (needs installing)

Add an AWS Provider Target
aws-provider (needs installing)

Add a GCP Provider Target
gcp-provider (needs installing)

Add an Azure Provider Target
azure-provider (needs installing)

Add a Hetzner Provider Target
hetzner-provider (needs installing)

Add a Fly.io Provider Target
fly-provider (needs installing)
```

Upon Target selection and configuration, Daytona will clone the specified Git repository and set up a new Workspace based on its contents. You will see progress information in the terminal, indicating the process of creating a Workspace.

```text
WORKSPACE | ✓ Request submitted
WORKSPACE | ✓ Creating workspace daytona
daytona   | Creating project daytona
daytona   | Pulling image...
daytona   | Pulling from daytonaio/workspace-project
...
daytona   | Project daytona created
daytona   | Starting project daytona
daytona   | Project daytona started
```

### From an Arbitrary Git URL

Creating a Workspace from an arbitrary Git URL sets up a new development environment by directly specifying the URL of the remote repository.

1. Run the following command to create a Workspace from a remote Git repository:

```shell
daytona create <REPO_URL>
```

**Example**

```shell
daytona create https://github.com/daytonaio/daytona.git
```

2. Select a Target to deploy your Workspace to. Selecting a Target will prompt you to input the [Target configuration](/docs/configuration/targets). The configurations vary based on the selected Target.

```text
Choose a Target
6 items
===
local
docker-provider

Add a Fly.io Provider Target
fly-provider (needs installing)

Add a Docker Provider Target
docker-provider (needs installing)

Add a Digital Ocean Provider Target
digitalocean-provider (needs installing)

Add an AWS Provider Target
aws-provider (needs installing)

Add an Azure Provider Target
azure-provider (needs installing)
```

Upon Target selection and configuration, Daytona will clone the specified Git repository and set up a new Workspace based on its contents. You will see progress information in the terminal, indicating the process of creating a Workspace.

Once complete, the Workspace will be ready for use with the specified repository and configuration.

```text
WORKSPACE | ✓ Request submitted
WORKSPACE | ✓ Creating workspace daytona
daytona   | Creating project daytona
daytona   | Pulling image...
daytona   | Pulling from daytonaio/workspace-project
...
daytona   | Project daytona created
daytona   | Starting project daytona
daytona   | Project daytona started
```

<Aside type="tip">
Set the Project Builder at Workspace creation time using command-line
flags. Refer to **[Builders](/docs/usage/builders)** for more information.
</Aside>

## Create a Workspace with Multiple Projects

Daytona allows you to create a Workspace that contains multiple repositories, which we refer to as Projects. This enables you to work on several codebases simultaneously within a single environment.

Multiple projects are deployed within the same virtual machine or instance depending on the [Provider](/docs/configuration/providers) infrastructure, allowing you to manage and develop multiple projects in a unified Workspace.

- The [Docker Provider](/docs/configuration/providers#docker) deploys each project in its own container.
- The [AWS Provider](/docs/configuration/providers#aws) deploys projects within the same EC2 instance.
- The [DigitalOcean Provider](/docs/configuration/providers#digitalocean) deploys projects within the same Droplet.
- The [Fly Provider](/docs/configuration/providers#fly) deploys projects within the same virtual machine.

Regardless of the infrastructure type, all projects are managed consistently within the Workspace.

1. Run the following command to create a Workspace with multiple projects:

```shell
daytona create --multi-project
```

2. Select one of the three provided options:

- **Select from a List of Repositories**

   If you choose a Git provider (e.g., GitHub), you will be presented with a list of your repositories from which you can select the desired repository.

- **Enter a Custom Repository URL**

   Alternatively, select the option to enter a custom repository URL manually if the repository is not listed under your Git provider account or is from an external source.

- **Create from Sample**

     If you do not have a repository ready, choose to create a Workspace from a sample project provided by Daytona. This option allows you to set up a new development environment using quick-start templates.

```text
Choose a Git Provider
3 items
===
GitHub
Enter a custom repository URL
Create from Sample
```

3. Select the Git repository from the list, enter the URL of the Git repository you want to link with your Workspace, or choose to create a Workspace from a sample project.

After your selection, you will be prompted to add a second project to the Workspace.

```text
Choose a Git Provider (Project #2)
3 items
===
GitHub
Enter a custom repository URL
Create from Sample
```

4. Select the Git repository from the list for the second project, enter the URL of the Git repository you want to link with your Workspace, or choose to create a Workspace from a sample project.

After adding the second project, you will be prompted to add another project to the Workspace.

```text
Add another project?

[Yes] [No]
```

Selecting `Yes` will allow you to add additional projects to the Workspace. Once you have added all the projects you need, select `No` to complete the Workspace creation process.

After adding all projects, you will be prompted with a summary of the Workspace configuration.

```text
SUMMARY

Project #1 - https://github.com/daytonaio/sample-python.git
   Build       Automatic
   Image       daytonaio/workspace-project:latest
   User        daytona

Project #2 - https://github.com/daytonaio/sample-go.git
   Build       Automatic
   Image       daytonaio/workspace-project:latest
   User        daytona
```

5. Enter a name for your Workspace.

```text
Workspace name
>
```

6. Select a Target to deploy your Workspace to. Selecting a Target will prompt you to input the [Target configuration](/docs/configuration/targets). The configurations vary based on the selected Target.

```text
Choose a Target
6 items
===
local
docker-provider

Add a Docker Provider Target
docker-provider (needs installing)

Add a Digital Ocean Provider Target
digitalocean-provider (needs installing)

Add an AWS Provider Target
aws-provider (needs installing)

Add a GCP Provider Target
gcp-provider (needs installing)

Add an Azure Provider Target
azure-provider (needs installing)

Add a Hetzner Provider Target
hetzner-provider (needs installing)

Add a Fly.io Provider Target
fly-provider (needs installing)
```

Upon Target selection and configuration, Daytona will clone the specified Git repository and set up a new Workspace based on its contents. You will see progress information in the terminal, indicating the process of creating a Workspace.

Once complete, the Workspace will be ready for use with the specified repository and configuration.

```text
WORKSPACE | ✓ Request submitted
WORKSPACE | ✓ Creating workspace daytona
daytona   | Creating project daytona
daytona   | Pulling image...
daytona   | Pulling from daytonaio/workspace-project
...
daytona   | Project daytona created
daytona   | Starting project daytona
daytona   | Project daytona started
```

## List Workspaces

Daytona allows you to keep track of your development environments by listing all previously created Workspaces. This helps you manage multiple projects and ensure that you can easily access and maintain your Workspaces.

1. Run the following command:

```shell
daytona list
```

Upon running this command, Daytona will display a list of your Workspaces with their details. You will be able to see the Workspace name, the repository it is connected to, the target of the Workspace, and its status.

```text
Workspace        Repository          Target     Status
─────────────────────────────────────────────────────────────────────
MyWorkspace      username/MyProject  local      RUNNING (30 minutes)
```

## Open An Existing Workspace

Daytona allows you to open an existing Workspace in your IDE. This enables you to quickly access and work on your projects in your preferred development environment. With Daytona, you can effortlessly switch between different Workspaces and maintain an efficient workflow.

1. Run the following command:

```shell
daytona code
```

Upon running this command, Daytona will display a list of your Workspaces with their details. You will be able to see the Workspace name, the unique identifier of the Workspace, and the repository it is connected to.

```text
Select a Workspace To Open
1 item

┃  MyProject
┃  abcdefg12hi3 (local)
┃  github.com/username/MyProject.git
```

2. Select the Workspace you want to open.

:::note
Configure Daytona to use your preferred IDE.
Refer to **[Set the Default IDE](/docs/usage/ide#set-the-default-ide)** for more information.
:::

## Delete Workspaces

Daytona allows you to delete one or more Workspaces, helping you manage your development environments by removing those that are no longer needed.

1. Run the following command:

```shell
daytona delete
```

Upon running this command, Daytona will display a list of your Workspaces with their details. You will be able to see the Workspace name, the unique identifier of the Workspace, and the repository it is connected to.

```text
Select Workspaces To Delete
1 item

┃ MyWorkspace
┃ abcdefg12hi3 (local)
┃ github.com/username/MyProject.git
```

2. Mark Workspaces for deletion by highlighting them and pressing `x`.

3. Press `Enter` on the selected Workspace to delete it.

```text
Delete: MyWorkspace

┃  abcdefg12hi3 (local)
┃  github.com/username/MyProject.git
```

4. Confirm the action.

```text
Delete workspace(s): [MyWorkspace]?
Are you sure you want to delete the workspace(s): [MyWorkspace]?

[Yes]   [No]
```

```text
Workspace MyWorkspace successfully deleted
```

### Non-Interactively

Daytona allows you to delete one or more existing Workspaces non-interactively, allowing for quick and automated cleanup of your development environments without manual selection.

1. Run the following command, specifying the workspace names/UUIDs to delete:

```shell
daytona delete WORKSPACE_1 WORKSPACE_2
```

Upon running this command, Daytona will prompt you to confirm the deletion of the specified Workspace. You will be able to see the Workspace name that you are about to delete, and you will have the option to confirm or cancel the action.

```text
Delete workspace(s): [MyWorkspace]?
Are you sure you want to delete the workspace(s): [MyWorkspace]?

[Yes]   [No]
```

2. Confirm the action to delete the selected Workspace.

```text
Workspace MyWorkspace successfully deleted
```

## Forward Ports from a Workspace

Daytona supports flexible port forwarding, allowing you to access services running in a Workspace locally or via a shareable public URL.
With port forwarding, you can work on your project in a Workspace and test your code externally.

### Access a Port Locally

You can access services running in a Workspace on your local machine.

**Prerequisite**

- A running Workspace with at least one service accessible via TCP/UDP.

1. Run the following command to forward a port from a running Workspace to your local machine:

```shell
daytona forward <PORT> <WORKSPACE> <PROJECT>
```

**Example:** Allow local access to port 4321 of the `example-dev-env` Workspace.

```shell
daytona forward 4321 example-dev-env
```

Upon running this command, Daytona will establish a port forwarding connection from the specified port in the Workspace to your local machine. The terminal will display a message indicating the local port where the forwarded connection is available:

```text
Port available at http://localhost:4321
```

### Access a Port via Public URL

You can access services running in a Workspace via a generated public URL.
This allows you to share your work with others in real-time.

:::note
This feature uses a free public proxy service hosted by Daytona Platforms, Inc.
By using this feature, you acknowledge that your data is processed in accordance with Daytona's [Privacy Policy](https://www.daytona.io/company/privacy-policy) and [Terms of Service](https://www.daytona.io/company/terms-of-service).
:::

**Prerequisite**

- A running Workspace with at least one service accessible via TCP/UDP.

1. Run the following command to generate a public URL for a port on a running Workspace:

```shell
daytona forward <PORT> <WORKSPACE> <PROJECT> --public
```

**Example:** Generate a URL to access port 4321 of the `example-dev-env` Workspace.

```shell
daytona forward 4321 example-dev-env --public
```

Upon running this command, Daytona will first establish a local port forwarding connection and display a message indicating the local port where the forwarded connection is available.

```text
Port available at http://localhost:4321
```

Then, Daytona will proceed to forward the port to a public URL. The terminal will display progress information and, upon completion, provide the generated public URL.

```text
Forwarding port to a public URL...
Port available at:
https://4321-ABC1DeF2GhI3JkLmNoP4RSTuVZ5.try-eu.daytona.app
```

This URL can be shared with others to provide real-time access to the service running on the specified port in your Workspace.

<Aside type="tip">
Alternatively, generate a public URL by executing the following command in a Workspace's shell:

```shell
daytona forward <PORT>
```

</Aside>