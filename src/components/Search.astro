<div id="searchbox-wrapper" style="display: none;">
  <div id="searchbox"></div>
  <div id="hits"></div>
  <div id="stats"></div>
</div>

<script>
  import { algoliasearch } from 'algoliasearch'
  import instantsearch from 'instantsearch.js'
  import { configure } from 'instantsearch.js/es/widgets'
  import hits from 'instantsearch.js/es/widgets/hits/hits'
  import searchBox from 'instantsearch.js/es/widgets/search-box/search-box'
  import stats from 'instantsearch.js/es/widgets/stats/stats'

  document.addEventListener('DOMContentLoaded', () => {
    const searchIcon = document.getElementById('search-icon')
    const searchBoxWrapper = document.getElementById('searchbox-wrapper')

    if (searchIcon) {
      searchIcon.addEventListener('click', toggleSearch)
    }

    document.addEventListener('keydown', event => {
      if ((event.metaKey || event.ctrlKey) && event.key === 'k') {
        event.preventDefault()
        toggleSearch()
      }
    })

    function toggleSearch() {
      if (searchBoxWrapper) {
        if (
          searchBoxWrapper.style.display === 'none' ||
          searchBoxWrapper.style.display === ''
        ) {
          searchBoxWrapper.style.display = 'block'
          document.body.classList.add('no-scroll')

          const searchBoxInput = document.querySelector(
            '#searchbox input.ais-SearchBox-input'
          )
          if (searchBoxInput) {
            ;(searchBoxInput as HTMLInputElement).focus()
          }
        } else {
          searchBoxWrapper.style.display = 'none'
          document.body.classList.remove('no-scroll')
        }
      }
    }
  })

  const searchClient = algoliasearch(
    import.meta.env.PUBLIC_ALGOLIA_APP_ID,
    import.meta.env.PUBLIC_ALGOLIA_API_KEY
  )

  const search = instantsearch({
    indexName: 'docs',
    searchClient,
  })

  search.addWidgets([
    searchBox({
      container: '#searchbox',
      placeholder: 'Search daytona.io',
      autofocus: false,
      ignoreCompositionEvents: true,
      searchAsYouType: true,
      showReset: false,
      showSubmit: false,
      showLoadingIndicator: false,
      queryHook: (query, search) => {
        const trimmedQuery = query.trim()
        search(trimmedQuery)
      },
    }),
    hits({
      container: '#hits',
      templates: {
        empty: '0 results found',
        item: `
					<div style="padding:4px;">
						<a href="{{url}}" style="text-decoration:none; font-size: 8px;">
							<h5 style="font-size: 20px;">
								{{#helpers.highlight}}{ "attribute": "title" }{{/helpers.highlight}}
							</h5>
                            <h6 style="font-size: 13px; color: #686868; padding-top:0px; padding-bottom: 4px;">
                                {{slug}}
                            </h6>
							<p style="font-size: 13px; padding-bottom: 16px;">
								{{#helpers.highlight}}{ "attribute": "description" }{{/helpers.highlight}}
							</p>
						</a>
					</div>
				`,
      },
    }),
    stats({ container: '#stats' }),
    configure({ hitsPerPage: 10, clickAnalytics: true, getRankingInfo: false }),
  ])

  search.start()

  search.on('render', () => {
    const searchBoxInput = document.querySelector(
      '#searchbox input.ais-SearchBox-input'
    ) as HTMLInputElement
    if (searchBoxInput) {
      Object.assign(searchBoxInput.style, {
        borderRadius: '4px',
        border: '1px solid var(--secondary-text-color)',
        padding: '16px',
        width: '90%',
        fontSize: '15px',
        paddingLeft: '16px',
        margin: '0 auto',
        display: 'block',
        textAlign: 'left',
      })
    }

    const hitsContainer = document.querySelector('#hits') as HTMLElement
    if (hitsContainer) {
      Object.assign(hitsContainer.style, {
        width: '70%',
        margin: '0 auto',
        display: 'none',
        listStyleType: 'none',
        counterReset: 'none',
        paddingTop: '20px',
      })
    }

    if (searchBoxInput && searchBoxInput.value.trim().length > 0) {
      if (hitsContainer) hitsContainer.style.display = 'block'
    } else {
      if (hitsContainer) hitsContainer.style.display = 'none'
    }

    const statsContainer = document.querySelector('#stats') as HTMLElement
    if (statsContainer) {
      Object.assign(statsContainer.style, {
        width: '90%',
        margin: '0 auto',
        display: 'block',
        padding: '8px',
      })
    }
  })
</script>

<style>
  #searchbox-wrapper {
    position: fixed;
    margin-top: 32px;
    top: 40px;
    left: 0;
    width: 100%;
    background: var(--bg-color);
    z-index: 1000;
    padding: 20px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    max-height: 100%;
    overflow-y: auto;
  }

  #searchbox-wrapper::-webkit-scrollbar {
    display: none;
  }

  .no-scroll {
    overflow: hidden;
  }
</style>
