<div id="searchbox-wrapper" style="display: none;">
  <div id="searchbox"></div>
  <div id="stats"></div>
  <div id="pagination"></div>
  <div id="hits"></div>
</div>

<script>
  import { algoliasearch } from 'algoliasearch'
  import instantsearch from 'instantsearch.js'
  import { configure } from 'instantsearch.js/es/widgets'
  import hits from 'instantsearch.js/es/widgets/hits/hits'
  import searchBox from 'instantsearch.js/es/widgets/search-box/search-box'
  import stats from 'instantsearch.js/es/widgets/stats/stats'
  import pagination from 'instantsearch.js/es/widgets/pagination/pagination'

  document.addEventListener('DOMContentLoaded', () => {
    const searchIcon = document.getElementById('search-icon')
    const searchIconMobile = document.getElementById('search-icon-mobile')
    const searchBoxWrapper = document.getElementById('searchbox-wrapper')

    if (searchIcon) {
      searchIcon.addEventListener('click', toggleSearch)
    }

    if (searchIconMobile) {
      searchIconMobile.addEventListener('click', toggleSearch)
    }

    document.addEventListener('keydown', event => {
      if ((event.metaKey || event.ctrlKey) && event.key === 'k') {
        event.preventDefault()
        toggleSearch()
      }
    })

    function toggleSearch() {
      if (searchBoxWrapper) {
        if (
          searchBoxWrapper.style.display === 'none' ||
          searchBoxWrapper.style.display === ''
        ) {
          searchBoxWrapper.style.display = 'block'
          document.body.classList.add('no-scroll')

          const searchBoxInput = document.querySelector(
            '#searchbox input.ais-SearchBox-input'
          )
          if (searchBoxInput) {
            ;(searchBoxInput as HTMLInputElement).focus()
          }
        } else {
          searchBoxWrapper.style.display = 'none'
          document.body.classList.remove('no-scroll')
        }
      }
    }
  })

  const searchClient = algoliasearch(
    import.meta.env.PUBLIC_ALGOLIA_APP_ID,
    import.meta.env.PUBLIC_ALGOLIA_API_KEY
  )

  const search = instantsearch({
    indexName: 'docs',
    searchClient,
  })

  let debounceTimeout: ReturnType<typeof setTimeout>

  search.addWidgets([
    searchBox({
      container: '#searchbox',
      placeholder: 'Search daytona.io',
      autofocus: false,
      ignoreCompositionEvents: true,
      searchAsYouType: true,
      showReset: false,
      showSubmit: false,
      showLoadingIndicator: false,
      queryHook: (query, search) => {
        const trimmedQuery = query.trim()
        clearTimeout(debounceTimeout)
        debounceTimeout = setTimeout(() => {
          search(trimmedQuery)
        }, 400)
      },
    }),
    hits({
      container: '#hits',
      templates: {
        empty: '0 results',
        item: `
					<div style="padding:4px;">
						<a href="{{url}}" style="text-decoration:none; font-size: 8px;">
              <h5 style="font-size: 20px; display: flex; align-items: center;">
                <span style="font-size: 10px; margin-right: 8px;">ðŸŸ¦</span>
                <span style="margin-left: 4px;">{{#helpers.highlight}}{ "attribute": "title" }{{/helpers.highlight}}</span>
              </h5>
              <h6 style="font-size: 12px; color: #686868; font-weight: 500; padding-top: 0px; padding-bottom: 4px; padding-left: 24px;">
                {{slug}}
              </h6>
							<p style="font-size: 12px; padding-bottom: 16px; padding-left: 24px;">
								{{#helpers.highlight}}{ "attribute": "description" }{{/helpers.highlight}}
							</p>
						</a>
					</div>
				`,
      },
    }),
    stats({ container: '#stats' }),
    pagination({ container: '#pagination' }),
    configure({ hitsPerPage: 10, clickAnalytics: true, getRankingInfo: false }),
  ])

  search.start()

  search.on('render', () => {
    const searchBoxInput = document.querySelector(
      '#searchbox input.ais-SearchBox-input'
    ) as HTMLInputElement
    if (searchBoxInput) {
      Object.assign(searchBoxInput.style, {
        borderRadius: '4px',
        border: '1px solid var(--secondary-text-color)',
        padding: '16px',
        width: '90%',
        fontSize: '15px',
        paddingLeft: '16px',
        margin: '0 auto',
        display: 'block',
        textAlign: 'left',
      })
    }

    const hitsContainer = document.querySelector('#hits') as HTMLElement
    if (hitsContainer) {
      Object.assign(hitsContainer.style, {
        width: '90%',
        margin: '0 auto',
        display: 'none',
        listStyleType: 'none',
        counterReset: 'none',
        paddingTop: '20px',
      })

      const hitsList = hitsContainer.querySelector('.ais-Hits-list')
      if (hitsList) {
        const updateGridColumns = () => {
          const isMobile = window.innerWidth <= 768
          Object.assign((hitsList as HTMLElement).style, {
            display: 'grid',
            gridTemplateColumns: isMobile ? '1fr' : 'repeat(2, 1fr)',
            gap: '8px',
            padding: '0',
            marginBottom: '128px',
          })
        }

        updateGridColumns()
        window.addEventListener('resize', updateGridColumns)
      }

      const hitItems = hitsContainer.querySelectorAll('.ais-Hits-item')
      hitItems.forEach(item => {
        Object.assign((item as HTMLElement).style, {
          listStyle: 'none',
          margin: '0',
          padding: '8px',
        })
      })
    }

    if (searchBoxInput && searchBoxInput.value.trim().length > 0) {
      if (hitsContainer) hitsContainer.style.display = 'block'
    } else {
      if (hitsContainer) hitsContainer.style.display = 'none'
    }

    const highlights = document.querySelectorAll(
      '.ais-Highlight-highlighted, mark'
    )

    highlights.forEach(highlight => {
      Object.assign((highlight as HTMLElement).style, {
        color: 'var(--highlight-color)',
        backgroundColor: 'var(--bg-color)',
      })
    })

    const statsContainer = document.querySelector('#stats') as HTMLElement
    const paginationContainer = document.querySelector(
      '#pagination'
    ) as HTMLElement

    if (paginationContainer) {
      Object.assign(paginationContainer.style, {
        width: '80%',
        margin: '0 auto',
        display: 'flex',
        padding: '8px',
        listStyleType: 'none',
        counterReset: 'none',
        justifyContent: 'center',
        alignItems: 'center',
      })

      let statsAndPaginationWrapper = document.querySelector(
        '#stats-pagination-wrapper'
      )
      if (!statsAndPaginationWrapper) {
        statsAndPaginationWrapper = document.createElement('div')
        statsAndPaginationWrapper.id = 'stats-pagination-wrapper'
        statsContainer?.parentNode?.insertBefore(
          statsAndPaginationWrapper,
          statsContainer
        )
        statsAndPaginationWrapper.appendChild(statsContainer)
        statsAndPaginationWrapper.appendChild(paginationContainer)
      }

      Object.assign((statsAndPaginationWrapper as HTMLElement).style, {
        width: '90%',
        margin: '0 auto',
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'center',
        padding: '8px',
      })

      if (statsContainer) {
        Object.assign(statsContainer.style, {
          margin: '0',
          padding: '8px 0',
          flex: '1',
        })
      }

      if (paginationContainer) {
        Object.assign(paginationContainer.style, {
          margin: '0',
          padding: '8px 0',
          display: 'flex',
          justifyContent: 'flex-end',
          alignItems: 'center',
          flex: '1',
        })

        const paginationItems = paginationContainer.querySelectorAll('li')
        paginationItems.forEach(item => {
          Object.assign(item.style, {
            display: 'inline-block',
            margin: '0 5px',
          })
        })

        const paginationLinks = paginationContainer.querySelectorAll('a, span')
        paginationLinks.forEach(link => {
          Object.assign((link as HTMLElement).style, {
            textDecoration: 'none',
            padding: '4px 8px',
          })
        })
      }
    }
  })
</script>

<style>
  #searchbox-wrapper {
    position: fixed;
    margin-top: 32px;
    top: 40px;
    left: 0;
    width: 100%;
    background: var(--bg-color);
    z-index: 1000;
    padding: 20px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    max-height: 100%;
    overflow-y: auto;
  }

  #searchbox-wrapper::-webkit-scrollbar {
    display: none;
  }

  .no-scroll {
    overflow: hidden;
  }
</style>
